<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑勇-个人博客</title>
  
  <subtitle>每多学一点知识，就少写一行代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/"/>
  <updated>2018-11-12T07:54:48.775Z</updated>
  <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/</id>
  
  <author>
    <name>郑勇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8-lambda表达式之stream</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/11/12/java8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8Bstream/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/11/12/java8-lambda表达式之stream/</id>
    <published>2018-11-12T07:52:47.000Z</published>
    <updated>2018-11-12T07:54:48.775Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h4><p>新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</p><h5 id="示列代码："><a href="#示列代码：" class="headerlink" title="示列代码："></a>示列代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package java8.lambda;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.IntSummaryStatistics;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * java 8 lambada 基础操作（http://www.runoob.com/java/java8-streams.html）</span><br><span class="line"> *</span><br><span class="line"> * @author: zhengyong Date: 2018/11/1 Time: 上午10:49</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //Runnable是一个函数接口，只包含了有个无参数的，返回void的run方法；</span><br><span class="line">        //所以lambda表达式左边没有参数，右边也没有return，只是单纯的打印一句话</span><br><span class="line">        new Thread(() -&gt; System.out.println(&quot;Test Java8 lambda!&quot;)).start();</span><br><span class="line"></span><br><span class="line">        //In Java 8:</span><br><span class="line">        List&lt;String&gt; features = Arrays.asList(&quot;Lambdas&quot;, &quot;Default Method&quot;, &quot;Stream API&quot;, &quot;Date and Time API&quot;);</span><br><span class="line"></span><br><span class="line">        // 1. forEach: 迭代流中的每个数据</span><br><span class="line">        System.out.println(&quot;\n... 1. start forEach&quot;);</span><br><span class="line">        features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n... 2. start stream &quot;);</span><br><span class="line">        System.out.println(&quot;... 3. start map&quot;);</span><br><span class="line">        // 2. stream: 为集合创建串行流</span><br><span class="line">        // 3. map: 映射每个元素到对应的结果</span><br><span class="line">        features.stream().map((s) -&gt; s + &quot;***&quot;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        // 4. filter: 用于通过设置的条件过滤出元素</span><br><span class="line">        System.out.println(&quot;\n... 4. start filter&quot;);</span><br><span class="line">        features.stream().filter(f -&gt; f.startsWith(&quot;L&quot;)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        // 5. limit: 用于获取指定数量的流</span><br><span class="line">        System.out.println(&quot;\n... 5. start limit&quot;);</span><br><span class="line">        features.stream().limit(2).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        // 6. sorted: 用于对流进行排序</span><br><span class="line">        System.out.println(&quot;\n... 6. start sorted&quot;);</span><br><span class="line">        features.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        // 7. parallel: 为集合创建并行流</span><br><span class="line">        System.out.println(&quot;\n... 7. start parallel stream&quot;);</span><br><span class="line">        features.parallelStream().filter(f -&gt; f.startsWith(&quot;L&quot;)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        // 8.Collectors :实现了很多归约操作</span><br><span class="line">        System.out.println(&quot;\n... 8. start Collectors&quot;);</span><br><span class="line">        List&lt;String&gt; list = features.stream().filter(f -&gt; f.startsWith(&quot;L&quot;)).collect(Collectors.toList());</span><br><span class="line">        String str = features.stream().filter(f -&gt; !f.isEmpty()).collect(Collectors.joining(&quot;,&quot;));</span><br><span class="line">        System.out.println(&quot;Collectors list=&quot; + list);</span><br><span class="line">        System.out.println(&quot;Collectors str=&quot; + str);</span><br><span class="line"></span><br><span class="line">        // 9. summaryStatistics: 统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上</span><br><span class="line">        System.out.println(&quot;\n... 8. start summaryStatistics&quot;);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">        IntSummaryStatistics stats = numbers.stream().mapToInt(x -&gt; x).summaryStatistics();</span><br><span class="line">        System.out.println(&quot;列表中最大的数 : &quot; + stats.getMax());</span><br><span class="line">        System.out.println(&quot;列表中最小的数 : &quot; + stats.getMin());</span><br><span class="line">        System.out.println(&quot;所有数之和 : &quot; + stats.getSum());</span><br><span class="line">        System.out.println(&quot;平均数 : &quot; + stats.getAverage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Test Java8 lambda!</span><br><span class="line"></span><br><span class="line">... 1. start forEach</span><br><span class="line">Lambdas</span><br><span class="line">Default Method</span><br><span class="line">Stream API</span><br><span class="line">Date and Time API</span><br><span class="line"></span><br><span class="line">... 2. start stream </span><br><span class="line">... 3. start map</span><br><span class="line">Lambdas***</span><br><span class="line">Default Method***</span><br><span class="line">Stream API***</span><br><span class="line">Date and Time API***</span><br><span class="line"></span><br><span class="line">... 4. start filter</span><br><span class="line">Lambdas</span><br><span class="line"></span><br><span class="line">... 5. start limit</span><br><span class="line">Lambdas</span><br><span class="line">Default Method</span><br><span class="line"></span><br><span class="line">... 6. start sorted</span><br><span class="line">Date and Time API</span><br><span class="line">Default Method</span><br><span class="line">Lambdas</span><br><span class="line">Stream API</span><br><span class="line"></span><br><span class="line">... 7. start parallel stream</span><br><span class="line">Lambdas</span><br><span class="line"></span><br><span class="line">... 8. start Collectors</span><br><span class="line">Collectors list=[Lambdas]</span><br><span class="line">Collectors str=Lambdas,Default Method,Stream API,Date and Time API</span><br><span class="line"></span><br><span class="line">... 8. start summaryStatistics</span><br><span class="line">列表中最大的数 : 7</span><br><span class="line">列表中最小的数 : 2</span><br><span class="line">所有数之和 : 25</span><br><span class="line">平均数 : 3.5714285714285716</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Stream-API&quot;&gt;&lt;a href=&quot;#Stream-API&quot; class=&quot;headerlink&quot; title=&quot;Stream API&quot;&gt;&lt;/a&gt;Stream API&lt;/h4&gt;&lt;p&gt;新添加的Stream API（java.util.stream） 把真正的函
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>awk使用</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/awk%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/awk使用/</id>
    <published>2018-09-05T07:49:34.000Z</published>
    <updated>2018-09-05T08:52:24.562Z</updated>
    
    <content type="html"><![CDATA[<p>首先建立文本<code>log.txt</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 this is a test</span><br><span class="line">3 Are you like awk</span><br><span class="line">This&apos;s a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><h4 id="A-每行按空格或TAB分割，输出文本中的1、4项-例如：awk-39-print-1-4-39-log-txt"><a href="#A-每行按空格或TAB分割，输出文本中的1、4项-例如：awk-39-print-1-4-39-log-txt" class="headerlink" title="A. 每行按空格或TAB分割，输出文本中的1、4项, 例如：awk &#39;{print $1,$4}&#39; log.txt"></a>A. 每行按空格或TAB分割，输出文本中的1、4项, 例如：<code>awk &#39;{print $1,$4}&#39; log.txt</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk &apos;&#123;print $1,$4&#125;&apos; log.txt</span><br><span class="line"></span><br><span class="line">2 a</span><br><span class="line">3 like</span><br><span class="line">This&apos;s</span><br><span class="line">10 orange,apple,mongo</span><br></pre></td></tr></table></figure><h4 id="B-使用”-”分割，例如：awk-F-39-print-1-2-39-log-txt"><a href="#B-使用”-”分割，例如：awk-F-39-print-1-2-39-log-txt" class="headerlink" title="B. 使用”,”分割，例如：awk -F, &#39;{print $1,$2}&#39; log.txt"></a>B. 使用”,”分割，例如：<code>awk -F, &#39;{print $1,$2}&#39; log.txt</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F, &apos;&#123;print $1,$2&#125;&apos; log.txt</span><br><span class="line"></span><br><span class="line">2 this is a test</span><br><span class="line">3 Are you like awk</span><br><span class="line">This&apos;s a test</span><br><span class="line">10 There are orange apple</span><br></pre></td></tr></table></figure><h4 id="C-使用多个分隔符-先使用空格分割，然后对分割结果再使用”-”分割-例如：awk-F-39-39-39-print-1-2-5-39-log-txt"><a href="#C-使用多个分隔符-先使用空格分割，然后对分割结果再使用”-”分割-例如：awk-F-39-39-39-print-1-2-5-39-log-txt" class="headerlink" title="C. 使用多个分隔符.先使用空格分割，然后对分割结果再使用”,”分割. 例如：awk -F &#39;[ ,]&#39;  &#39;{print $1,$2,$5}&#39; log.txt"></a>C. 使用多个分隔符.先使用空格分割，然后对分割结果再使用”,”分割. 例如：<code>awk -F &#39;[ ,]&#39;  &#39;{print $1,$2,$5}&#39; log.txt</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F &apos;[ ,]&apos;  &apos;&#123;print $1,$2,$5&#125;&apos; log.txt</span><br><span class="line"></span><br><span class="line">2 this test</span><br><span class="line">3 Are awk</span><br><span class="line">This&apos;s a</span><br><span class="line">10 There apple</span><br></pre></td></tr></table></figure><h4 id="D-使用awk-v设置变量a-1-例如：awk-v-a-1-39-print-1-1-a-39-log-txt"><a href="#D-使用awk-v设置变量a-1-例如：awk-v-a-1-39-print-1-1-a-39-log-txt" class="headerlink" title="D. 使用awk -v设置变量a=1, 例如：awk -v a=1 &#39;{print $1,$1+a}&#39; log.txt"></a>D. 使用<code>awk -v</code>设置变量<code>a=1</code>, 例如：<code>awk -v a=1 &#39;{print $1,$1+a}&#39; log.txt</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v a=1 &apos;&#123;print $1,$1+a&#125;&apos; log.txt</span><br><span class="line"></span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">This&apos;s 1</span><br><span class="line">10 11</span><br></pre></td></tr></table></figure><h4 id="E-使用脚本，例如：awk-f-cal-awk-log-txt"><a href="#E-使用脚本，例如：awk-f-cal-awk-log-txt" class="headerlink" title="E. 使用脚本，例如：awk -f cal.awk log.txt"></a>E. 使用脚本，例如：<code>awk -f cal.awk log.txt</code></h4><h4 id="F-awk使用运算符"><a href="#F-awk使用运算符" class="headerlink" title="F. awk使用运算符"></a>F. awk使用运算符</h4><p>1) 过滤第一例大于2的行. 例如：<code>awk &#39;$1&gt;2&#39; log.txt</code></p><p>2) 过滤第一列大于2并且第二列等于’Are’的行. 例如：<code>awk &#39;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; {print $1,$2,$3}&#39; log.txt</code></p><h4 id="G-awk正使用则表达式"><a href="#G-awk正使用则表达式" class="headerlink" title="G. awk正使用则表达式"></a>G. awk正使用则表达式</h4><p>注意：~ 表示模式开始。// 中是模式。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出第二列包含 &quot;th&quot;，并打印第二列与第四列</span><br><span class="line">$ awk &apos;$2 ~ /th/ &#123;print $2,$4&#125;&apos; log.txt</span><br><span class="line">---------------------------------------------</span><br><span class="line">this a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 输出包含&quot;re&quot; 的行</span><br><span class="line">$ awk &apos;/re/ &apos; log.txt</span><br><span class="line">---------------------------------------------</span><br><span class="line">3 Are you like awk</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 忽略大小写</span><br><span class="line">$ awk &apos;BEGIN&#123;IGNORECASE=1&#125; /this/&apos; log.txt</span><br><span class="line">---------------------------------------------</span><br><span class="line">2 this is a test</span><br><span class="line">This&apos;s a test</span><br></pre></td></tr></table></figure><h4 id="H-awk脚本"><a href="#H-awk脚本" class="headerlink" title="H. awk脚本"></a>H. awk脚本</h4><p>BEGIN{ 这里面放的是执行前的语句 }</p><p>END {这里面放的是处理完所有的行后要执行的语句 }</p><p>{这里面放的是处理每一行时要执行的语句}</p><p>例如<code>cal.awk</code>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/awk -f</span><br><span class="line">#运行前</span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">#运行中</span><br><span class="line">&#123;</span><br><span class="line">    math+=$3</span><br><span class="line">    english+=$4</span><br><span class="line">    computer+=$5</span><br><span class="line">    printf &quot;%-6s %-6s %4d %8d %8d %8d\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5</span><br><span class="line">&#125;</span><br><span class="line">#运行后</span><br><span class="line">END &#123;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">    printf &quot;  TOTAL:%10d %8d %8d \n&quot;, math, english, computer</span><br><span class="line">    printf &quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>G. 统计行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;/error/&apos; app.log | awk &apos;END &#123;print NR&#125;&apos;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c &apos;error&apos; app.log</span><br></pre></td></tr></table></figure><p>参考：<a href="http://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-comm-awk.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先建立文本&lt;code&gt;log.txt&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="awk" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>docker使用</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/docker%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/docker使用/</id>
    <published>2018-09-05T07:46:20.000Z</published>
    <updated>2018-09-05T07:53:05.050Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><blockquote><p> Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便</p></blockquote><blockquote><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</p></blockquote><h4 id="二、安装须知"><a href="#二、安装须知" class="headerlink" title="二、安装须知"></a>二、安装须知</h4><p>操作系统: Mac OS Yosemite 10.10.5</p><p>Mac地址：<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">https://download.docker.com/mac/stable/Docker.dmg</a></p><p>Docker.dmg：安装提供Docker Engine，Docker CLI客户端，Docker Compose和Docker Machine</p><h4 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h4><p>1）运行Docker.dmg安装</p><p>2）配置个人加速镜像（我使用阿里云<a href="https://cr.console.aliyun.com/#/accelerator）" target="_blank" rel="noopener">https://cr.console.aliyun.com/#/accelerator）</a></p><p>3)    运行<code>docker version</code>和<code>docker info</code>检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   60ccb22</span><br><span class="line"> Built:        Thu Feb 23 10:40:59 2017</span><br><span class="line"> OS/Arch:      darwin/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">➜ docker info</span><br><span class="line">Containers: 1</span><br><span class="line"> Running: 1</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 1</span><br><span class="line">Server Version: 17.03.0-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 977c511eda0925a723debdc94d09459af49d082a</span><br><span class="line">runc version: a01dafd48bc1c7cc12bdb01206f9fea7dd6feb70</span><br><span class="line">init version: 949e6fa</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 4.9.12-moby</span><br><span class="line">Operating System: Alpine Linux v3.5</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 2</span><br><span class="line">Total Memory: 1.952 GiB</span><br><span class="line">Name: moby</span><br><span class="line">ID: V5PN:CAOJ:YYKT:B7IK:PTP3:OQKS:Q26Q:UJYZ:OG2K:HSPK:WRME:KJP5</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): true</span><br><span class="line"> File Descriptors: 23</span><br><span class="line"> Goroutines: 32</span><br><span class="line"> System Time: 2017-03-27T03:33:06.945792584Z</span><br><span class="line"> EventsListeners: 1</span><br><span class="line">No Proxy: 127.0.0.1</span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Experimental: true</span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://xxxxx.mirror.aliyuncs.com</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure><h4 id="四、运行nginx"><a href="#四、运行nginx" class="headerlink" title="四、运行nginx"></a>四、运行nginx</h4><p>启动运行nginx, 执行<code>docker run -d -p 80:80 --name webserver nginx</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">Unable to find image &apos;nginx:latest&apos; locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">693502eb7dfb: Pull complete</span><br><span class="line">6decb850d2bc: Pull complete</span><br><span class="line">c3e19f087ed6: Pull complete</span><br><span class="line">Digest: sha256:52a189e49c0c797cfc5cbfe578c68c225d160fb13a42954144b29af3fe4fe335</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">4b11e6ed897d6df195936f60916ffda704d55f75645270f338a10b68480112e7</span><br></pre></td></tr></table></figure><p>启动bash命令交互操作客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker exec -it webserver bash</span><br><span class="line">root@2964bd62006a:/#</span><br></pre></td></tr></table></figure><p>停止niginx, 运行<code>docker stop webserver</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker stop webserver</span><br><span class="line">webserver</span><br></pre></td></tr></table></figure><p>删除nginx, 运行<code>docker rm webserver</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker rm webserver</span><br><span class="line">webserver</span><br></pre></td></tr></table></figure><h4 id="五、运行ubuntu"><a href="#五、运行ubuntu" class="headerlink" title="五、运行ubuntu"></a>五、运行ubuntu</h4><p>镜像官方仓库：<a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">https://hub.docker.com/explore/</a></p><p>下载ubuntu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ docker pull ubuntu:14.04</span><br><span class="line">14.04: Pulling from library/ubuntu</span><br><span class="line">30d541b48fc0: Pull complete</span><br><span class="line">8ecd7f80d390: Pull complete</span><br><span class="line">46ec9927bb81: Pull complete</span><br><span class="line">2e67a4d67b44: Pull complete</span><br><span class="line">7d9dd9155488: Pull complete</span><br><span class="line">Digest: sha256:62a5dce5ceccd7f1cb2672a571ebee52cad1f08eec9b57fe4965fb0968a9602e</span><br><span class="line">Status: Downloaded newer image for ubuntu:14.04</span><br></pre></td></tr></table></figure><p>启动运行ubuntu</p><blockquote><p>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</p><p>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</p><p>ubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。</p><p>–name myUbuntu：给容器取一个别名叫<code>myUbuntu</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker run -it --rm --name myUbuntu ubuntu:14.04</span><br><span class="line">root@2ef73a93ef7b:/#</span><br></pre></td></tr></table></figure><p>或者不指定ubuntu版本，直接启动时，直接下载最新版本<code>ubuntu:latest</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜ docker run -it --name myUbuntu ubuntu:14.04</span><br><span class="line">Unable to find image &apos;ubuntu:latest&apos; locally</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">d54efb8db41d: Pull complete</span><br><span class="line">f8b845f45a87: Pull complete</span><br><span class="line">e8db7bf7c39f: Pull complete</span><br><span class="line">9654c40e9079: Pull complete</span><br><span class="line">6d9ef359eaaa: Pull complete</span><br><span class="line">Digest: sha256:dd7808d8792c9841d0b460122f1acf0a2dd1f56404f8d1e56298048885e45535</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">root@366ea11633cf:/#</span><br></pre></td></tr></table></figure><p>停止ubuntu容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker stop myUbuntu</span><br><span class="line">myUbuntu</span><br></pre></td></tr></table></figure><p>删除ubuntu容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ docker rm myUbuntu</span><br><span class="line">myUbuntu</span><br></pre></td></tr></table></figure><p>查看历史镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              6b914bbcb89e        3 weeks ago         182 MB</span><br><span class="line">ubuntu              14.04               7c09e61e9035        3 weeks ago         188 MB</span><br></pre></td></tr></table></figure><p>删除ubuntu镜像</p><p>使用<code>docker rmi &lt;IMAGE ID&gt;</code>删除，但是必须先要<code>docker rm myUbuntu</code>才能删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ docker rmi 7c09e61e9035</span><br><span class="line">Untagged: ubuntu:14.04</span><br><span class="line">Untagged: ubuntu@sha256:62a5dce5ceccd7f1cb2672a571ebee52cad1f08eec9b57fe4965fb0968a9602e</span><br><span class="line">Deleted: sha256:7c09e61e90350e8f5c0cba2979003bdfe32c2d027b68b4f0cf9063cdd7b4bafd</span><br><span class="line">Deleted: sha256:304aecb5e13929f85d3ce2e9d83d0212866c8e55a460c94cf24bd75da1c7c153</span><br><span class="line">Deleted: sha256:f302be18d46a45c0edbbd9b4bc02db764a4b0b8cd9bd0490f33dfaff039a3b62</span><br><span class="line">Deleted: sha256:c523f3173f6028e5329fd401331c375f7b9b9e831d915fafaf358f55e36e3747</span><br><span class="line">Deleted: sha256:94e631422130dc414878fd05efe3d59de44c9d8904696a7c299a83f378a92845</span><br><span class="line">Deleted: sha256:c29b5eadf94a90a2abda13e765d4fad4825fd15621dea1d9a98b60b89b835c2a</span><br></pre></td></tr></table></figure><p>查看docker进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                      PORTS               NAMES</span><br><span class="line">366ea11633cf        ubuntu              &quot;/bin/bash&quot;         About a minute ago   Exited (0) 59 seconds ago                       myUbuntu</span><br></pre></td></tr></table></figure><h4 id="六、制作自定义nginx"><a href="#六、制作自定义nginx" class="headerlink" title="六、制作自定义nginx"></a>六、制作自定义nginx</h4><p>1) 启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">Unable to find image &apos;nginx:latest&apos; locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">693502eb7dfb: Pull complete</span><br><span class="line">6decb850d2bc: Pull complete</span><br><span class="line">c3e19f087ed6: Pull complete</span><br><span class="line">Digest: sha256:52a189e49c0c797cfc5cbfe578c68c225d160fb13a42954144b29af3fe4fe335</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">2964bd62006acd43611ea045e8152f651905e213c392e008a59eebe667080b3d</span><br></pre></td></tr></table></figure><p>2） 启动bash控制台并修改<code>index.html</code>内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  docker exec -it webserver bash</span><br><span class="line">root@2964bd62006a:/# ls</span><br><span class="line">bin  boot  devetc  home  liblib64  media  mnt  optproc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@2964bd62006a:/# echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br><span class="line">root@2964bd62006a:/# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>3）查看容器修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  docker diff webserver</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br><span class="line">C /usr/share/nginx/html/index.html</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br></pre></td></tr></table></figure><p>4）制作v2版本tag的nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  docker commit --author &quot;zhengyong&quot; --message &quot;update index.htm&quot; webserver nigix:v2</span><br><span class="line">sha256:b86a71250cf4e41a34af24b7e2924e3909ecdf74262195d6ac30fd57bbdbaf35</span><br></pre></td></tr></table></figure><p>5) 启动v2版本nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  docker run -d -p 80:80 --name ng nigix:v2</span><br><span class="line">72f15356de38c26456cdee8a68651a2de25e59d8f8e4ce31e82c434927ff4b4f</span><br></pre></td></tr></table></figure><h4 id="七、Dockerfile"><a href="#七、Dockerfile" class="headerlink" title="七、Dockerfile"></a>七、Dockerfile</h4><p>1）创建<code>工程目录</code>和<code>Dockerfile</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜ mkdir mynginx</span><br><span class="line">➜ cd mynginx</span><br><span class="line">➜ touch Dockerfile</span><br></pre></td></tr></table></figure><p>2）<code>Dockerfile</code>文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>3) 构建docker镜像</p><p>使用命令<code>docker build -t nginx:v3 .</code>构建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line"> ---&gt; 6b914bbcb89e</span><br><span class="line">Step 2/2 : RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running in a41235243cb9</span><br><span class="line"> ---&gt; 7a2e14fdfefb</span><br><span class="line">Removing intermediate container a41235243cb9</span><br><span class="line">Successfully built 7a2e14fdfefb</span><br></pre></td></tr></table></figure><p>docker导致mac硬盘空间不足：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line">docker volume rm $(docker volume ls |awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">rm -rf ~/Library/Containers/com.docker.docker/Data/*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Drools使用</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Drools%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Drools使用/</id>
    <published>2018-09-05T07:44:42.000Z</published>
    <updated>2018-09-05T07:52:55.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Maven-dependency"><a href="#Maven-dependency" class="headerlink" title="Maven dependency"></a>Maven dependency</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.kie&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kie-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.5.0.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;drools-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.5.0.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.5.0.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Rule-Syntax"><a href="#Rule-Syntax" class="headerlink" title="Rule Syntax"></a>Rule Syntax</h3><h5 id="1-Conditions-in-Rules"><a href="#1-Conditions-in-Rules" class="headerlink" title="1. Conditions in Rules"></a>1. Conditions in Rules</h5><p>A rule can contain many conditions and patterns such as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Account (balance == 200)</span><br><span class="line">Customer (name == “Vivek”)</span><br></pre></td></tr></table></figure><p>The above conditions check if the Account balance is 200 or the Customer name is “Vivek”.</p><h5 id="2-Variables-in-Rules"><a href="#2-Variables-in-Rules" class="headerlink" title="2. Variables in Rules"></a>2. Variables in Rules</h5><p>A variable name in Drools starts with a Dollar($) symbol.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$account : Account( )</span><br><span class="line">$account is the variable for Account() class</span><br></pre></td></tr></table></figure><p>Drools can work with all the native Java types and even Enum.</p><h5 id="3-Comments-in-Rules"><a href="#3-Comments-in-Rules" class="headerlink" title="3. Comments in Rules"></a>3. Comments in Rules</h5><p>The special characters, # or //, can be used to mark single-line comments.</p><p>For multi-line comments, use the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">   Another line</span><br><span class="line">   .........</span><br><span class="line">   .........</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="4-Functions-in-Rules"><a href="#4-Functions-in-Rules" class="headerlink" title="4.Functions in Rules"></a>4.Functions in Rules</h5><p>Functions are a convenience feature. They can be used in conditions and consequences. Functions represent an alternative to the utility/helper classes. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function double calculateSquare (double value) &#123;</span><br><span class="line">   return value * value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-Salience-same-as-priority"><a href="#5-Salience-same-as-priority" class="headerlink" title="5. Salience (same as priority)"></a>5. Salience (same as priority)</h5><p>Salience is a very important feature of Rule Syntax. Salience is used by the conflict resolution strategy to decide which rule to fire first. By default, it is the main criterion.</p><p>We can use salience to define the order of firing rules. Salience has one attribute, which takes any expression that returns a number of type int (positive as well as negative numbers are valid). The higher the value, the more likely a rule will be picked up by the conflict resolution strategy to fire.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salience ($account.balance * 5)</span><br></pre></td></tr></table></figure><p>The default salience value is 0. We should keep this in mind when assigning salience values to some rules only.</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://www.tutorialspoint.com/drools/drools_rule_syntax.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/drools/drools_rule_syntax.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Maven-dependency&quot;&gt;&lt;a href=&quot;#Maven-dependency&quot; class=&quot;headerlink&quot; title=&quot;Maven dependency&quot;&gt;&lt;/a&gt;Maven dependency&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="drools" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/drools/"/>
    
  </entry>
  
  <entry>
    <title>HashMap(JDK-1.8)</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/HashMap-JDK-1-8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/HashMap-JDK-1-8/</id>
    <published>2018-09-05T07:43:36.000Z</published>
    <updated>2018-09-05T07:52:47.298Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一：resize扩容"><a href="#一：resize扩容" class="headerlink" title="一：resize扩容"></a>一：resize扩容</h4><blockquote><ol><li>当前table Node数组赋给临时变量，并记录老table的初始化容量和加载因子</li><li>如果老初始化容量大于0，新表初始化容量直接扩大为原来的2倍</li><li>循环老table，对新table赋值</li></ol></blockquote><blockquote><blockquote><p>1) 如果如果链表只有一个，则进行直接赋值<code>newTab[e.hash &amp; (newCap - 1)] = e</code> </p></blockquote></blockquote><blockquote><blockquote><p>2）如果红黑二叉树：……</p></blockquote></blockquote><blockquote><blockquote><p>3）链表赋值，如果新表位置变化<code>e.hash &amp; oldCap) == 0</code>, 则老表数据在新表位置为（老数组位置i+老数组容量oldCap）</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">      Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">      int oldCap = (oldTab == null) ? 0 : oldTab.length;// 数组长度</span><br><span class="line">      int oldThr = threshold;// 临界值</span><br><span class="line">      int newCap, newThr = 0;</span><br><span class="line">      if (oldCap &gt; 0) &#123;</span><br><span class="line">          // 扩容</span><br><span class="line">          if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">              // 原数组长度大于最大容量(1073741824) 则将threshold设为Integer.MAX_VALUE=2147483647</span><br><span class="line">              // 接近MAXIMUM_CAPACITY的两倍</span><br><span class="line">              threshold = Integer.MAX_VALUE;</span><br><span class="line">              return oldTab;</span><br><span class="line">          &#125; else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) &#123;</span><br><span class="line">              // 新数组长度 是原来的2倍，</span><br><span class="line">              // 临界值也扩大为原来2倍</span><br><span class="line">              newThr = oldThr &lt;&lt; 1;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else if (oldThr &gt; 0) &#123;</span><br><span class="line">          // 如果原来的thredshold大于0则将容量设为原来的thredshold</span><br><span class="line">          // 在第一次带参数初始化时候会有这种情况</span><br><span class="line">          newCap = oldThr;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          // 在默认无参数初始化会有这种情况</span><br><span class="line">          newCap = DEFAULT_INITIAL_CAPACITY;// 16</span><br><span class="line">          newThr = (int) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);// 0.75*16=12</span><br><span class="line">      &#125;</span><br><span class="line">      if (newThr == 0) &#123;</span><br><span class="line">          // 如果新 的容量 ==0</span><br><span class="line">          float ft = (float) newCap * loadFactor;// loadFactor 哈希加载因子 默认0.75,可在初始化时传入,16*0.75=12 可以放12个键值对</span><br><span class="line">          newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float) MAXIMUM_CAPACITY ? (int) ft : Integer.MAX_VALUE);</span><br><span class="line">      &#125;</span><br><span class="line">      threshold = newThr;// 将临界值设置为新临界值</span><br><span class="line">      @SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="line">      // 扩容</span><br><span class="line">      Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) new Node[newCap];</span><br><span class="line">      table = newTab;</span><br><span class="line">      // 如果原来的table有数据，则将数据复制到新的table中</span><br><span class="line">      if (oldTab != null) &#123;</span><br><span class="line">          // 根据容量进行循环整个数组，将非空元素进行复制</span><br><span class="line">          for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">              Node&lt;K, V&gt; e;</span><br><span class="line">              // 获取数组的第j个元素</span><br><span class="line">              if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                  oldTab[j] = null;</span><br><span class="line">                  // 如果链表只有一个，则进行直接赋值</span><br><span class="line">                  if (e.next == null)</span><br><span class="line">                      // e.hash &amp; (newCap - 1) 确定元素存放位置</span><br><span class="line">                      newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                  //  此处省略红黑树</span><br><span class="line">                  else &#123;</span><br><span class="line">                      // 进行链表复制</span><br><span class="line">                      // 方法比较特殊： 它并没有重新计算元素在数组中的位置</span><br><span class="line">                      // 而是采用了 原始位置加原数组长度的方法计算得到位置</span><br><span class="line">                      Node&lt;K, V&gt; loHead = null, loTail = null;</span><br><span class="line">                      Node&lt;K, V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                      Node&lt;K, V&gt; next;</span><br><span class="line">                      do &#123;</span><br><span class="line">                          next = e.next;</span><br><span class="line">                          // 注意：不是(e.hash &amp; (oldCap-1));而是(e.hash &amp; oldCap)</span><br><span class="line"></span><br><span class="line">                          // (e.hash &amp; oldCap) 得到的是 元素的在数组中的位置是否需要移动,示例如下</span><br><span class="line">                          // 示例1：</span><br><span class="line">                          // e.hash=10 0000 1010</span><br><span class="line">                          // oldCap=16 0001 0000</span><br><span class="line">                          //   &amp;   =0  0000 0000       比较高位的第一位 0</span><br><span class="line">                          //结论：元素位置在扩容后数组中的位置没有发生改变</span><br><span class="line"></span><br><span class="line">                          // 示例2：</span><br><span class="line">                          // e.hash=17 0001 0001</span><br><span class="line">                          // oldCap=16 0001 0000</span><br><span class="line">                          //   &amp;   =1  0001 0000      比较高位的第一位   1</span><br><span class="line">                          //结论：元素位置在扩容后数组中的位置发生了改变，新的下标位置是原下标位置+原数组长度</span><br><span class="line"></span><br><span class="line">                          // (e.hash &amp; (oldCap-1)) 得到的是下标位置,示例如下</span><br><span class="line">                          //   e.hash=10 0000 1010</span><br><span class="line">                          // oldCap-1=15 0000 1111</span><br><span class="line">                          //      &amp;  =10 0000 1010</span><br><span class="line"></span><br><span class="line">                          //   e.hash=17 0001 0001</span><br><span class="line">                          // oldCap-1=15 0000 1111</span><br><span class="line">                          //      &amp;  =1  0000 0001</span><br><span class="line"></span><br><span class="line">                          //新下标位置</span><br><span class="line">                          //   e.hash=17 0001 0001</span><br><span class="line">                          // newCap-1=31 0001 1111    newCap=32</span><br><span class="line">                          //      &amp;  =17 0001 0001    1+oldCap = 1+16</span><br><span class="line"></span><br><span class="line">                          //元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</span><br><span class="line">                          // 0000 0001-&gt;0001 0001</span><br><span class="line"></span><br><span class="line">                          if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                              // 如果原元素位置没有发生变化</span><br><span class="line">                              if (loTail == null)</span><br><span class="line">                                  loHead = e;// 确定首元素</span><br><span class="line">                              // 第一次进入时     e   -&gt; aa  ; loHead-&gt; aa</span><br><span class="line">                              else</span><br><span class="line">                                  loTail.next = e;</span><br><span class="line">                              //第二次进入时        loTail-&gt; aa  ;    e  -&gt; bb ;  loTail.next -&gt; bb;而loHead和loTail是指向同一块内存的，所以loHead.next 地址为 bb  </span><br><span class="line">                              //第三次进入时        loTail-&gt; bb  ;    e  -&gt; cc ;  loTail.next 地址为 cc;loHead.next.next = cc</span><br><span class="line">                              loTail = e;</span><br><span class="line">                              // 第一次进入时         e   -&gt; aa  ; loTail-&gt; aa loTail指向了和  loHead相同的内存空间</span><br><span class="line">                              // 第二次进入时               e   -&gt; bb  ; loTail-&gt; bb loTail指向了和  loTail.next（loHead.next）相同的内存空间   loTail=loTail.next</span><br><span class="line">                              // 第三次进入时               e   -&gt; cc  ; loTail-&gt; cc loTail指向了和  loTail.next(loHead.next.next)相同的内存</span><br><span class="line">                          &#125; else &#123;</span><br><span class="line">                              //与上面同理</span><br><span class="line"></span><br><span class="line">                              if (hiTail == null)</span><br><span class="line">                                  hiHead = e;</span><br><span class="line">                              else</span><br><span class="line">                                  hiTail.next = e;</span><br><span class="line">                              hiTail = e;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125; while ((e = next) != null);//这一块就是 旧链表迁移新链表</span><br><span class="line">                      //总结：1.8中 旧链表迁移新链表    链表元素相对位置没有变化; 实际是对对象的内存地址进行操作 </span><br><span class="line">                      //在1.7中  旧链表迁移新链表        如果在新表的数组索引位置相同，则链表元素会倒置</span><br><span class="line">                      if (loTail != null) &#123;</span><br><span class="line">                          loTail.next = null;// 将链表的尾节点 的next 设置为空</span><br><span class="line">                          newTab[j] = loHead;</span><br><span class="line">                      &#125;</span><br><span class="line">                      if (hiTail != null) &#123;</span><br><span class="line">                          hiTail.next = null;// 将链表的尾节点 的next 设置为空</span><br><span class="line">                          newTab[j + oldCap] = hiHead;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return newTab;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="二、线程安全"><a href="#二、线程安全" class="headerlink" title="二、线程安全"></a>二、线程安全</h4><p>JDK-1.7 线程不安全</p><p>resize()导致线程不安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">transfer()函数逻辑</span><br><span class="line">1. 对索引数组中的元素遍历</span><br><span class="line">2. 对链表上的每一个节点遍历：用 next 取得要转移那个元素的下一个，将 e 转移到新 Hash 表的头部，使用头插法插入节点。</span><br><span class="line">3. 循环2，直到链表节点全部转移</span><br><span class="line">4. 循环1，直到所有索引数组全部转移</span><br><span class="line"></span><br><span class="line">经过这几步，我们会发现转移的时候是逆序的。假如转移前链表顺序是1-&gt;2-&gt;3，那么转移后就会变成3-&gt;2-&gt;1。这时候就有点头绪了，死锁问题不就是因为1-&gt;2的同时2-&gt;1造成的吗？所以，HashMap 的死锁问题就出在这个transfer()函数上。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一：resize扩容&quot;&gt;&lt;a href=&quot;#一：resize扩容&quot; class=&quot;headerlink&quot; title=&quot;一：resize扩容&quot;&gt;&lt;/a&gt;一：resize扩容&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当前table Node数组赋给临时变
      
    
    </summary>
    
    
      <category term="HashMap" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Mockito单元测试</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Mockito%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Mockito单元测试/</id>
    <published>2018-09-05T07:42:29.000Z</published>
    <updated>2018-09-05T07:52:37.442Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mockito-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2-beta&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.powermock&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.5&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.powermock&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;powermock-api-mockito&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.5&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="普通类mock"><a href="#普通类mock" class="headerlink" title="普通类mock"></a>普通类mock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.mockito.InjectMocks;</span><br><span class="line">import org.mockito.Mock;</span><br><span class="line">import org.mockito.Mockito;</span><br><span class="line">import org.mockito.MockitoAnnotations;</span><br><span class="line">import org.mockito.invocation.InvocationOnMock;</span><br><span class="line">import org.mockito.stubbing.Answer;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">public class DataHandlerTest &#123;</span><br><span class="line"></span><br><span class="line">    @InjectMocks</span><br><span class="line">    DataHandler                   dataHandler = new DataHandler();</span><br><span class="line"></span><br><span class="line">    @Mock</span><br><span class="line">    protected HttpServletRequest  request;</span><br><span class="line"></span><br><span class="line">    @Mock</span><br><span class="line">    protected HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void before() throws Exception &#123;</span><br><span class="line">        MockitoAnnotations.initMocks(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testPrintString() throws Exception &#123;</span><br><span class="line">        JsonResult result = new JsonResult();</span><br><span class="line">        Mockito.doNothing().doAnswer(new Answer() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Object answer(InvocationOnMock invocation) throws Throwable &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).when(response).setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line"></span><br><span class="line">        String path = DataHandlerTest.class.getResource(&quot;/&quot;).getPath() + &quot;dataHandler.txt&quot;;</span><br><span class="line">        File file = new File(path);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        PrintWriter writer = new PrintWriter(file);</span><br><span class="line">        Mockito.when(response.getWriter()).thenReturn(writer);</span><br><span class="line">        dataHandler.print(result);</span><br><span class="line"></span><br><span class="line">        if (file != null &amp;&amp; file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态类mock"><a href="#静态类mock" class="headerlink" title="静态类mock"></a>静态类mock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(PowerMockRunner.class)</span><br><span class="line">@PrepareForTest(ThreadContext.class)</span><br><span class="line">public class CartTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @InjectMocks</span><br><span class="line">    private Cart cart = new Cart();</span><br><span class="line"></span><br><span class="line">    @Mock</span><br><span class="line">    ThreadContext threadContext;</span><br><span class="line"></span><br><span class="line">    @Mock</span><br><span class="line">    protected HttpServletRequest request;</span><br><span class="line">    </span><br><span class="line">    @Mock</span><br><span class="line">    protected HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void before() throws Exception &#123; </span><br><span class="line">        MockitoAnnotations.initMocks(this);</span><br><span class="line">        PowerMockito.mockStatic(ThreadContext.class);</span><br><span class="line"></span><br><span class="line">        ThreadContext threadContext2 = new ThreadContext();</span><br><span class="line">        threadContext2.setLoginId(&quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        //Mock当前用户信息 currentUser</span><br><span class="line">        Mockito.when(ThreadContext.getCurrentUser()).thenReturn(threadContext2);</span><br><span class="line"></span><br><span class="line">        //Mock response.setHeader方法</span><br><span class="line">        Mockito.doAnswer(new Answer&lt;Object&gt;() &#123;</span><br><span class="line">            public Object answer(InvocationOnMock invocation) &#123;</span><br><span class="line">                Object[] args = invocation.getArguments();</span><br><span class="line">                return &quot;called with arguments: &quot; + args;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).when(response).setHeader(Mockito.anyString(),Mockito.anyString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">   /** </span><br><span class="line">    * </span><br><span class="line">    * Method: screen(Context context) </span><br><span class="line">    * </span><br><span class="line">    */ </span><br><span class="line">    @Test</span><br><span class="line">    public void test() throws Exception &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = Maps.newHashMap();</span><br><span class="line">        map.put(&quot;Login&quot;,&quot;test&quot;);</span><br><span class="line">        Context context = new MappedContext();</span><br><span class="line"></span><br><span class="line">        //Mock request中获取回调函数名的方法</span><br><span class="line">        Mockito.when(request.getParameter(Mockito.any(String.class))).thenReturn(&quot;callback&quot;);</span><br><span class="line">        cart.screen(context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Maven依赖&quot;&gt;&lt;a href=&quot;#Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven依赖&quot;&gt;&lt;/a&gt;Maven依赖&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="mockito" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/mockito/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务级别</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/MySQL%E4%BA%8B%E5%8A%A1%E7%BA%A7%E5%88%AB/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/MySQL事务级别/</id>
    <published>2018-09-05T07:41:29.000Z</published>
    <updated>2018-09-05T07:52:28.978Z</updated>
    
    <content type="html"><![CDATA[<p>幻读：事务1读取数据时，事务2增加并提交，事务1再次读取数据时，可以看到事务B新增的数据。</p><p>不可重复读：事务1读取数据时，事务2修改并提交该数据，事务1再次读取事务时，可以看到事务B修改后的记录</p><p>脏读：事务1更新了记录，但没有提交，事务2读取了更新后的行，然后事务T1回滚，现在T2读取无效。</p><h4 id="事务级别"><a href="#事务级别" class="headerlink" title="事务级别"></a>事务级别</h4><ol><li>read uncommit：可能出现脏读，幻读，不可重复读</li><li>read commit : 不允许出现脏读，可能出现幻读，不可重复读</li><li>repeaable commit : 不会出现脏读、不可重复读，可能出现幻读</li><li>seralizeable : 不会出现脏读，幻读，不可重复读</li></ol><p><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="noopener">http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;幻读：事务1读取数据时，事务2增加并提交，事务1再次读取数据时，可以看到事务B新增的数据。&lt;/p&gt;
&lt;p&gt;不可重复读：事务1读取数据时，事务2修改并提交该数据，事务1再次读取事务时，可以看到事务B修改后的记录&lt;/p&gt;
&lt;p&gt;脏读：事务1更新了记录，但没有提交，事务2读取了更
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>spring schema扩展</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/spring-schema%E6%89%A9%E5%B1%95/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/spring-schema扩展/</id>
    <published>2018-09-05T07:39:49.000Z</published>
    <updated>2018-09-05T07:52:18.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Spring 2.5在2.0的基于Schema的Bean配置的基础之上，再增加了扩展XML配置的机制。通过该机制，我们可以编写自己的Schema，并根据自定义的Schema用自定的标签配置Bean。要使用的Spring的扩展XML配置机制，也比较简单，有以下4个步骤：</p><ol><li>编写自定义Schema文件；</li><li>编写自定义NamespaceHandler；</li><li>编写解析BeanDefinition的parser</li><li>在Spring中注册上述组建</li></ol></blockquote><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">```      </span><br><span class="line"></span><br><span class="line">#### 一、编写schema文件</span><br><span class="line"></span><br><span class="line">参考：[http://www.w3school.com.cn/schema/schema_elements_ref.asp](http://www.w3school.com.cn/schema/schema_elements_ref.asp) , 如下`people.xsd`文件:</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;xsd:schema xmlns=&quot;http://www.pomelo.com/schema/people&quot;</span><br><span class="line">            xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;</span><br><span class="line">            xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">            targetNamespace=&quot;http://www.pomelo.com/schema/people&quot;</span><br><span class="line">            elementFormDefault=&quot;qualified&quot;</span><br><span class="line">            attributeFormDefault=&quot;unqualified&quot;&gt;</span><br><span class="line">    &lt;xsd:import namespace=&quot;http://www.springframework.org/schema/beans&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xsd:element name=&quot;student&quot;&gt;</span><br><span class="line">        &lt;xsd:complexType&gt;</span><br><span class="line">            &lt;xsd:complexContent&gt;</span><br><span class="line">                &lt;xsd:extension base=&quot;beans:identifiedType&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;xsd:attribute name=&quot;name&quot; type=&quot;xsd:string&quot;&gt;</span><br><span class="line">                        &lt;xsd:annotation&gt;</span><br><span class="line">                            &lt;xsd:documentation&gt;姓名&lt;/xsd:documentation&gt;</span><br><span class="line">                        &lt;/xsd:annotation&gt;</span><br><span class="line">                    &lt;/xsd:attribute&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;xsd:attribute name=&quot;age&quot; type=&quot;xsd:string&quot;&gt;</span><br><span class="line">                        &lt;xsd:annotation&gt;</span><br><span class="line">                            &lt;xsd:documentation&gt;年龄&lt;/xsd:documentation&gt;</span><br><span class="line">                        &lt;/xsd:annotation&gt;</span><br><span class="line">                    &lt;/xsd:attribute&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/xsd:extension&gt;</span><br><span class="line">            &lt;/xsd:complexContent&gt;</span><br><span class="line">        &lt;/xsd:complexType&gt;</span><br><span class="line">    &lt;/xsd:element&gt;</span><br><span class="line">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure><h4 id="二、编写自定义NamespaceHandler"><a href="#二、编写自定义NamespaceHandler" class="headerlink" title="二、编写自定义NamespaceHandler"></a>二、编写自定义NamespaceHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"student"</span>, <span class="keyword">new</span> StudentBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、编写BeanDefinition"><a href="#三、编写BeanDefinition" class="headerlink" title="三、编写BeanDefinition"></a>三、编写BeanDefinition</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">getBeanClass</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Student.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder bean)</span> </span>&#123;</span><br><span class="line">        String name = element.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        bean.addPropertyValue(<span class="string">"name"</span>, name);</span><br><span class="line"></span><br><span class="line">        String age = element.getAttribute(<span class="string">"age"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(age)) &#123;</span><br><span class="line">            bean.addPropertyValue(<span class="string">"age"</span>, Integer.valueOf(age));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package schema;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">      </span><br><span class="line">    private String name;  </span><br><span class="line">      </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、注册schema组件"><a href="#四、注册schema组件" class="headerlink" title="四、注册schema组件"></a>四、注册schema组件</h4><p>最后在META-INF目录下添加两个配置文件(<code>spring.handler</code>和<code>spring.schema</code>):</p><p><code>spring.handler</code>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.pomelo.com/schema/people=schema.StudentNamespaceHandler</span><br></pre></td></tr></table></figure><p><code>spring.schema</code>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.pomelo.com/schema/people.xsd=META-INF/people.xsd</span><br></pre></td></tr></table></figure><h4 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h4><p>新建<code>applicationContext.xml</code>放在clasapath下面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:people</span>=<span class="string">"http://www.pomelo.com/schema/people"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.pomelo.com/schema/people http://www.pomelo.com/schema/people.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">people:student</span> <span class="attr">id</span>=<span class="string">"student1"</span> <span class="attr">name</span>=<span class="string">"student1"</span> <span class="attr">age</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">people:student</span> <span class="attr">id</span>=<span class="string">"student2"</span> <span class="attr">name</span>=<span class="string">"student2"</span> <span class="attr">age</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student3"</span> <span class="attr">class</span>=<span class="string">"schema.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"student3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhengyong on 17/3/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchemaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">        Student student1 = (Student) ctx.getBean(<span class="string">"student1"</span>);</span><br><span class="line">        Student student2 = (Student) ctx.getBean(<span class="string">"student2"</span>);</span><br><span class="line">        Student student3 = (Student) ctx.getBean(<span class="string">"student3"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + student1.getName() + <span class="string">" age :"</span> + student1.getAge());</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + student2.getName() + <span class="string">" age :"</span> + student2.getAge());</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + student3.getName() + <span class="string">" age :"</span> + student3.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体代码详见：<a href="https://github.com/zyongjava/pomelo/blob/master/src/main/resources/META-INF/people.xsd" target="_blank" rel="noopener">https://github.com/zyongjava/pomelo/blob/master/src/main/resources/META-INF/people.xsd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring 2.5在2.0的基于Schema的Bean配置的基础之上，再增加了扩展XML配置的机制。通过该机制，
      
    
    </summary>
    
    
      <category term="schema" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/schema/"/>
    
  </entry>
  
  <entry>
    <title>swagger自动生成API文档</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/swagger%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/swagger自动生成API文档/</id>
    <published>2018-09-05T07:38:43.000Z</published>
    <updated>2018-09-05T07:39:09.913Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、pom-xml配置"><a href="#一、pom-xml配置" class="headerlink" title="一、pom.xml配置"></a>一、pom.xml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--swagger --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>二、spring boot配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.pomelo.web.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * swagger自动生成API文档 (http://127.0.0.1:8080/swagger-ui.html)</span><br><span class="line"> */</span><br><span class="line">@EnableSwagger2</span><br><span class="line">@Configuration</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"> </span><br><span class="line">    //是否开启swagger，正式环境一般是需要关闭的，可根据springboot的多环境配置进行设置</span><br><span class="line">    @Value(value = &quot;$&#123;swagger.enabled&#125;&quot;)</span><br><span class="line">    Boolean swaggerEnabled;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">                // 是否开启</span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                // 扫描的路径包</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;cn.pomelo.web.controller&quot;))</span><br><span class="line">                // 指定路径处理PathSelectors.any()代表所有的路径</span><br><span class="line">                .paths(PathSelectors.any()).build().pathMapping(&quot;/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;SpringBoot-Swagger2集成和使用-demo示例&quot;)</span><br><span class="line">                .description(&quot;spring boot swagger restful api document&quot;)</span><br><span class="line">                // 作者信息</span><br><span class="line">                .contact(new Contact(&quot;yong.zheng&quot;, &quot;https://blog.csdn.net/zhengyong15984285623?viewmode=contents&quot;, &quot;zyongjava@163.com&quot;))</span><br><span class="line">                .version(&quot;1.0.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、swagger-ui.html配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * MVC配置</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class CustomMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">        registry.addResourceHandler(&quot;swagger-ui.html&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(&quot;/webjars/**&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、注解说明</p><p>常用到的注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Api</span><br><span class="line">@ApiModel</span><br><span class="line">@ApiModelProperty</span><br><span class="line">@ApiOperation</span><br><span class="line">@ApiParam</span><br><span class="line">@ApiResponse</span><br><span class="line">@ApiResponses</span><br><span class="line">@ResponseHeader</span><br></pre></td></tr></table></figure><p>地址：<a href="https://www.cnblogs.com/hyl8218/p/8520994.html" target="_blank" rel="noopener">https://www.cnblogs.com/hyl8218/p/8520994.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、pom-xml配置&quot;&gt;&lt;a href=&quot;#一、pom-xml配置&quot; class=&quot;headerlink&quot; title=&quot;一、pom.xml配置&quot;&gt;&lt;/a&gt;一、pom.xml配置&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="swagger" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>spring初始化bean循环依赖解决</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/spring%E5%88%9D%E5%A7%8B%E5%8C%96bean%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E8%A7%A3%E5%86%B3/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/spring初始化bean循环依赖解决/</id>
    <published>2018-09-05T07:37:16.000Z</published>
    <updated>2018-09-05T07:51:59.461Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring启动加载bean日志"><a href="#spring启动加载bean日志" class="headerlink" title="spring启动加载bean日志"></a>spring启动加载bean日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">2017-04-14 10:01:05,511 - org.springframework.core.env.StandardEnvironment -0    [main] DEBUG  - Initializing new StandardEnvironment</span><br><span class="line">2017-04-14 10:01:05,542 - org.springframework.core.env.StandardEnvironment -31   [main] DEBUG  - Adding [systemProperties] PropertySource with lowest search precedence</span><br><span class="line">2017-04-14 10:01:05,544 - org.springframework.core.env.StandardEnvironment -33   [main] DEBUG  - Adding [systemEnvironment] PropertySource with lowest search precedence</span><br><span class="line">2017-04-14 10:01:05,545 - org.springframework.core.env.StandardEnvironment -34   [main] DEBUG  - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]</span><br><span class="line">2017-04-14 10:01:05,551 - org.springframework.context.support.ClassPathXmlApplicationContext -40   [main] INFO   - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@90f6bfd: startup date [Fri Apr 14 10:01:05 CST 2017]; root of context hierarchy</span><br><span class="line">2017-04-14 10:01:05,775 - org.springframework.core.env.StandardEnvironment -264  [main] DEBUG  - Initializing new StandardEnvironment</span><br><span class="line">2017-04-14 10:01:05,776 - org.springframework.core.env.StandardEnvironment -265  [main] DEBUG  - Adding [systemProperties] PropertySource with lowest search precedence</span><br><span class="line">2017-04-14 10:01:05,780 - org.springframework.core.env.StandardEnvironment -269  [main] DEBUG  - Adding [systemEnvironment] PropertySource with lowest search precedence</span><br><span class="line">2017-04-14 10:01:05,783 - org.springframework.core.env.StandardEnvironment -272  [main] DEBUG  - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]</span><br><span class="line">2017-04-14 10:01:05,852 - org.springframework.beans.factory.xml.XmlBeanDefinitionReader -341  [main] INFO   - Loading XML bean definitions from class path resource [applicationContext.xml]</span><br><span class="line">2017-04-14 10:01:05,861 - org.springframework.beans.factory.xml.DefaultDocumentLoader -350  [main] DEBUG  - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]</span><br><span class="line">2017-04-14 10:01:06,105 - org.springframework.beans.factory.xml.PluggableSchemaResolver -594  [main] DEBUG  - Loading schema mappings from [META-INF/spring.schemas]</span><br><span class="line">2017-04-14 10:01:06,136 - org.springframework.beans.factory.xml.PluggableSchemaResolver -625  [main] DEBUG  - Loaded schema mappings: &#123;http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd&#125;</span><br><span class="line">2017-04-14 10:01:06,139 - org.springframework.beans.factory.xml.PluggableSchemaResolver -628  [main] DEBUG  - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd</span><br><span class="line">2017-04-14 10:01:06,252 - org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader -741  [main] DEBUG  - Loading bean definitions</span><br><span class="line">2017-04-14 10:01:06,309 - org.springframework.beans.factory.xml.XmlBeanDefinitionReader -798  [main] DEBUG  - Loaded 2 bean definitions from location pattern [/applicationContext.xml]</span><br><span class="line">2017-04-14 10:01:06,309 - org.springframework.context.support.ClassPathXmlApplicationContext -798  [main] DEBUG  - Bean factory for org.springframework.context.support.ClassPathXmlApplicationContext@90f6bfd: org.springframework.beans.factory.support.DefaultListableBeanFactory@7e2d773b: defining beans [studentId,teacherId]; root of factory hierarchy</span><br><span class="line">2017-04-14 10:01:06,372 - org.springframework.context.support.ClassPathXmlApplicationContext -861  [main] DEBUG  - Unable to locate MessageSource with name &apos;messageSource&apos;: using default [org.springframework.context.support.DelegatingMessageSource@6950e31]</span><br><span class="line">2017-04-14 10:01:06,380 - org.springframework.context.support.ClassPathXmlApplicationContext -869  [main] DEBUG  - Unable to locate ApplicationEventMulticaster with name &apos;applicationEventMulticaster&apos;: using default [org.springframework.context.event.SimpleApplicationEventMulticaster@5891e32e]</span><br><span class="line">2017-04-14 10:01:06,386 - org.springframework.beans.factory.support.DefaultListableBeanFactory -875  [main] INFO   - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7e2d773b: defining beans [studentId,teacherId]; root of factory hierarchy</span><br><span class="line">2017-04-14 10:01:06,387 - org.springframework.beans.factory.support.DefaultListableBeanFactory -876  [main] DEBUG  - Creating shared instance of singleton bean &apos;studentId&apos;</span><br><span class="line">2017-04-14 10:01:06,387 - org.springframework.beans.factory.support.DefaultListableBeanFactory -876  [main] DEBUG  - Creating instance of bean &apos;studentId&apos;</span><br><span class="line">2017-04-14 10:01:06,573 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1062 [main] DEBUG  - Eagerly caching bean &apos;studentId&apos; to allow for resolving potential circular references</span><br><span class="line">2017-04-14 10:01:06,682 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1171 [main] DEBUG  - Creating shared instance of singleton bean &apos;teacherId&apos;</span><br><span class="line">2017-04-14 10:01:06,682 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1171 [main] DEBUG  - Creating instance of bean &apos;teacherId&apos;</span><br><span class="line">2017-04-14 10:01:06,683 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1172 [main] DEBUG  - Eagerly caching bean &apos;teacherId&apos; to allow for resolving potential circular references</span><br><span class="line">2017-04-14 10:01:06,689 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1178 [main] DEBUG  - Returning eagerly cached instance of singleton bean &apos;studentId&apos; that is not fully initialized yet - a consequence of a circular reference</span><br><span class="line">2017-04-14 10:01:06,698 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1187 [main] DEBUG  - Finished creating instance of bean &apos;teacherId&apos;</span><br><span class="line">2017-04-14 10:01:06,699 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1188 [main] DEBUG  - Finished creating instance of bean &apos;studentId&apos;</span><br><span class="line">2017-04-14 10:01:06,699 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1188 [main] DEBUG  - Returning cached instance of singleton bean &apos;teacherId&apos;</span><br><span class="line">2017-04-14 10:01:06,701 - org.springframework.context.support.ClassPathXmlApplicationContext -1190 [main] DEBUG  - Unable to locate LifecycleProcessor with name &apos;lifecycleProcessor&apos;: using default [org.springframework.context.support.DefaultLifecycleProcessor@69a10787]</span><br><span class="line">2017-04-14 10:01:06,702 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1191 [main] DEBUG  - Returning cached instance of singleton bean &apos;lifecycleProcessor&apos;</span><br><span class="line">2017-04-14 10:01:06,707 - org.springframework.core.env.PropertySourcesPropertyResolver -1196 [main] DEBUG  - Searching for key &apos;spring.liveBeansView.mbeanDomain&apos; in [systemProperties]</span><br><span class="line">2017-04-14 10:01:06,707 - org.springframework.core.env.PropertySourcesPropertyResolver -1196 [main] DEBUG  - Searching for key &apos;spring.liveBeansView.mbeanDomain&apos; in [systemEnvironment]</span><br><span class="line">2017-04-14 10:01:06,708 - org.springframework.core.env.PropertySourcesPropertyResolver -1197 [main] DEBUG  - Could not find key &apos;spring.liveBeansView.mbeanDomain&apos; in any property source. Returning [null]</span><br><span class="line">2017-04-14 10:01:06,709 - org.springframework.beans.factory.support.DefaultListableBeanFactory -1198 [main] DEBUG  - Returning cached instance of singleton bean &apos;studentId&apos;</span><br><span class="line">name: student3 age :23</span><br></pre></td></tr></table></figure><p>1）创建bean是先检查缓存是否有或利用this.singletonsCurrentlyInCreation.containsKey(beanName)条件过滤正在创建中的bean(singletonObject = this.earlySingletonObjects.get(beanName);)，没有就创建bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultSingletonBeanRegistry: 180行</span><br></pre></td></tr></table></figure><p>2）创建bean时先标明这个bean正在创建singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE)， getEarlyBeanReference（）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DefaultSingletonBeanRegistry: 217行 标记bean正在创建</span><br><span class="line"></span><br><span class="line">AbstractAutowireCapableBeanFactory : 510行 获取正在创建引用bean</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Add the given singleton factory for building the specified singleton</span><br><span class="line"> * if necessary.</span><br><span class="line"> * &lt;p&gt;To be called for eager registration of singletons, e.g. to be able to</span><br><span class="line"> * resolve circular references.</span><br><span class="line"> * @param beanName the name of the bean</span><br><span class="line"> * @param singletonFactory the factory for the singleton object</span><br><span class="line"> */</span><br><span class="line">protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) &#123;</span><br><span class="line">Assert.notNull(singletonFactory, &quot;Singleton factory must not be null&quot;);</span><br><span class="line">synchronized (this.singletonObjects) &#123;</span><br><span class="line">if (!this.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line">this.singletonFactories.put(beanName, singletonFactory);</span><br><span class="line">this.earlySingletonObjects.remove(beanName);</span><br><span class="line">this.registeredSingletons.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3） 利用缓存bean。检测改bean是否是正在创建的bean，然后利用getObjectForBeanInstance<br>（）方法获取真正bean</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;spring启动加载bean日志&quot;&gt;&lt;a href=&quot;#spring启动加载bean日志&quot; class=&quot;headerlink&quot; title=&quot;spring启动加载bean日志&quot;&gt;&lt;/a&gt;spring启动加载bean日志&lt;/h4&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="spring" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spark基础</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Spark%E5%9F%BA%E7%A1%80/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/Spark基础/</id>
    <published>2018-09-05T07:36:08.000Z</published>
    <updated>2018-09-05T09:50:38.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>使用语言：scala</p><p>术语：Resilient Distributed Datasets（RDD）</p><h3 id="二、弹性分布式数据集-RDD-定义"><a href="#二、弹性分布式数据集-RDD-定义" class="headerlink" title="二、弹性分布式数据集(RDD)定义"></a>二、弹性分布式数据集(RDD)定义</h3><p>Spark围绕着弹性分布式数据集（RDD）的概念，是一个可以并行操作的容错容器集合，有两种方法来创建RDD：</p><blockquote><ol><li>并行化驱动程序中的现有集合</li></ol></blockquote><blockquote><ol start="2"><li>外部存储系统中的数据集，例如共享文件系统，HDFS，HBase或提供Hadoop InputFormat的任何数据源。</li></ol></blockquote><p>1） Parallelized Collections(并行数据集)</p><p>使用SparkContext的parallelize方法创建一个并行数据集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val data = Array(1, 2, 3, 4, 5)</span><br><span class="line">val distData = sc.parallelize(data)</span><br></pre></td></tr></table></figure><p>2） 外部数据集(共享文件系统,HDFS,HBase…)</p><p>下面使用SparkContext的textFile方法创建一个文件数据集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val distFile = sc.textFile(&quot;data.txt&quot;)</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><ol><li>Spark的所有基于文件的输入方法（包括textFile）都支持在目录，压缩文件和通配符上运行。 例如，可以使用textFile（“/ my / directory”），textFile（“/ my / directory / <em>。txt”）和textFile（“/ my / directory / </em>.gz”）。</li></ol></blockquote><blockquote><ol start="2"><li>textFile方法还接受可选的第二个参数，用于控制文件的分区数。 默认情况下，Spark为文件的每个块创建一个分区（HDFS默认为128MB），但你也可以通过传递一个更大的值来请求更多的分区。 请注意，您不能有比块更少的分区。</li></ol></blockquote><h3 id="三、弹性分布式数据集-RDD-操作"><a href="#三、弹性分布式数据集-RDD-操作" class="headerlink" title="三、弹性分布式数据集(RDD)操作"></a>三、弹性分布式数据集(RDD)操作</h3><p>####（一）定义</p><p>RDD支持两种类型的操作：</p><blockquote><ol><li>转换（Transformations）：从现有数据集创建新数据集。例如：map是一个通过一个函数传递每个数据集元素的变换，并返回一个表示结果的新RDD</li></ol></blockquote><blockquote><ol start="2"><li>动作（Actions）：在数据集上运行计算后向驱动程序返回值。例如：reduce是使用一些函数聚合RDD的所有元素并将最终结果返回到驱动程序的动作</li></ol></blockquote><p>Spark中的所有转换都是懒惰的，因为它们不会马上计算它们的结果。相反，他们只记住应用于一些基础数据集（例如文件）的转换。仅当操作需要将结果返回到驱动程序时才会计算转换。这种设计使Spark能够更有效地运行。例如，我们可以认识到通过map创建的数据集将在reduce中使用，并且只返回reduce到驱动程序的结果，而不是较大的映射数据集。</p><p>默认情况下，每次对其执行操作时，都可以重新计算每个已转换的RDD。但是，您还可以使用persist（或cache）方法在内存中持久化RDD，在这种情况下，Spark会保留集群上的元素，以便在下次查询时更快地访问。还支持在磁盘上持久存储RDD，或者在多个节点上复制RDD。</p><p>####（二）基础</p><p>为了说明RDD基础知识，下面示列程序解释说明： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val lines = sc.textFile(&quot;data.txt&quot;) </span><br><span class="line">val lineLengths = lines.map(s =&gt; s.length)</span><br><span class="line">val totalLength = lineLengths.reduce((a, b) =&gt; a + b)</span><br><span class="line">lineLengths.persist()</span><br></pre></td></tr></table></figure><ol><li>第一行定义来自外部文件的基本RDD。 此数据集未加载到内存中或以其他方式处理：行仅仅是指向文件的指针。</li><li>第二行定义lineLength作为地图变换的结果。 同样，由于懒惰，lineLength不会立即计算</li><li>第三行我们运行reduce，这是一个动作。 在这一点上，Spark将计算分解为在单独的机器上运行的任务，每个机器运行它的一部分映射和本地缩减，只返回它的驱动程序的答案。</li><li>第四行持久化数据到内存</li></ol><p>####（三）RDD类型说明</p><p>下面表格列除了<code>Spark</code>支持的一下常用<code>Transformations</code> ：</p><table><thead><tr><th>转换（Transformation）</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>map(func)</td><td>返回通过函数func传递源的每个元素形成的新的分布式数据集</td><td></td></tr><tr><td>filter(func)</td><td>返回通过选择func返回true的源的那些元素形成的新数据集</td><td></td></tr><tr><td>flatMap(func)</td><td>与map类似，但每个输入项可以映射到0个或更多的输出项（因此func应该返回一个Seq，而不是一个单独的项）</td><td></td></tr><tr><td>mapPartitions(func)</td><td>类似于map，但是在RDD的每个分区（块）上单独运行，因此当在类型T的RDD上运行时，func必须是Iterator <t> =&gt; Iterator <u>类型</u></t></td><td></td></tr><tr><td>mapPartitionsWithIndex(func)</td><td>与mapPartition类似，但是也为func提供了表示分区索引的整数值，因此当在类型为T的RDD上运行时，func必须是类型（Int，Iterator <t>）=&gt; Iterator =&gt; Iterator <u>类型</u></t></td><td></td></tr><tr><td>sample(withReplacement, fraction, seed)</td><td>使用给定的随机数发生器种子，采样具有或不具有替换的数据的分数</td><td></td></tr><tr><td>union(otherDataset)</td><td>返回一个新的数据集，其中包含源数据集和参数中元素的并集</td><td></td></tr><tr><td>intersection(otherDataset)</td><td>返回一个包含源数据集和参数中的元素交集的新RDD</td><td></td></tr><tr><td>distinct([numTasks]))</td><td>返回包含源数据集的不同元素的新数据集</td><td>去重元素</td></tr><tr><td>groupByKey([numTasks])</td><td>当在（K，V）对的数据集上调用时，返回（K，Iterable <v>）对的数据集。注意：如果要进行分组以便对每个键执行聚合（例如总和或平均值），使用reduceByKey或aggregateByKey将产生更好的性能。注意：默认情况下，输出中的并行性级别取决于父RDD的分区数。 您可以传递可选的numTasks参数，以设置不同数量的任务。</v></td><td></td></tr><tr><td>reduceByKey(func, [numTasks])</td><td>当在（K，V）对的数据集上调用时，返回（K，V）对的数据集，其中使用给定的reduce函数func聚集每个键的值，其必须是类型（V，V）=&gt; V.像groupByKey一样，reduce任务的数量可以通过可选的第二个参数来配置</td><td></td></tr><tr><td>aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])</td><td>当在（K，V）对的数据集上调用时，返回（K，U）对的数据集，其中使用给定的组合函数和中性“零”值来聚合每个键的值。 允许与输入值类型不同的聚合值类型，同时避免不必要的分配。 像groupByKey中一样，reduce任务的数量可以通过可选的第二个参数来配置</td><td></td></tr><tr><td>sortByKey([ascending], [numTasks])</td><td>当对（K，V）对的数据集（其中K实现Ordered）调用时，返回按升序或降序按键排序的（K，V）对的数据集，如布尔值升序参数中所指定。</td><td></td></tr><tr><td>join(otherDataset, [numTasks])</td><td>当对类型（K，V）和（K，W）的数据集调用时，返回具有每个键的所有元素对的（K，（V，W））对的数据集。 外部联接通过leftOuterJoin，rightOuterJoin和fullOuterJoin支持</td><td></td></tr><tr><td>cogroup(otherDataset, [numTasks])</td><td>当对类型（K，V）和（K，W）的数据集调用时，返回（K，（Iterable <v>，Iterable <w>））元组的数据集。 此操作也称为groupWith。</w></v></td><td></td></tr><tr><td>cartesian(otherDataset)</td><td>当调用类型T和U的数据集时，返回（T，U）对（所有元素对）的数据集</td><td></td></tr><tr><td>pipe(command, [envVars])</td><td>通过shell命令管道RDD的每个分区，例如。 一个Perl或bash脚本。 RDD元素被写入进程的stdin，并且行输出到其stdout作为字符串的RDD返回</td><td></td></tr><tr><td>coalesce(numPartitions)</td><td>将RDD中的分区数减少到numPartitions。 用于在过滤掉大型数据集后更有效地运行操作</td><td></td></tr><tr><td>repartition(numPartitions)</td><td>随机重新刷新RDD中的数据以创建更多或更少的分区，并在它们之间进行平衡。 这总是在网络上刷新所有数据</td><td></td></tr><tr><td>repartitionAndSortWithinPartitions(partitioner)</td><td>根据给定的分区器重新分区RDD，并在每个生成的分区中按其键排序记录。 这比调用重新分区然后在每个分区内排序更有效，因为它可以将排序推入shuffle机器</td></tr></tbody></table><p>下面表格列除了<code>Spark</code>支持的一下常用<code>Actions</code> ：</p><table><thead><tr><th>动作（Action）</th><th>说明</th><th></th></tr></thead><tbody><tr><td>reduce(func)</td><td>使用函数func（它接受两个参数并返回一个）聚合数据集的元素。 函数应该是可交换和关联的，以便它可以被并行正确计算</td><td></td></tr><tr><td>collect()</td><td>在驱动程序中将数据集的所有元素作为数组返回。 这在返回足够小的数据子集的过滤器或其他操作之后通常是有用的</td><td></td></tr><tr><td>count()</td><td>返回数据集中的元素数</td><td></td></tr><tr><td>first()</td><td>返回数据集的第一个元素,类似于take(1)</td><td></td></tr><tr><td>take(n)</td><td>返回数组中前n个元素的数组</td><td></td></tr><tr><td>takeSample(withReplacement, num, [seed])</td><td>返回具有数据集的num个元素的随机样本的数组，具有或不具有替换，可选地预指定随机数生成器种子</td><td></td></tr><tr><td>takeOrdered(n, [ordering])</td><td>使用它们的自然顺序或自定义比较器返回RDD的前n个元素将数据集的元素作为文本文件（或一组文本文件）写入本地文件系统，HDFS或任何其他Hadoop支持的文件系统中的给定目录中。 Spark将对每个元素调用toString将其转换为文件中的一行文本</td><td></td></tr><tr><td>saveAsSequenceFile(path) (Java and Scala)</td><td>将数据集的元素作为Hadoop SequenceFile写入本地文件系统，HDFS或任何其他Hadoop支持的文件系统中的给定路径中。 这可以在实现Hadoop的Writable接口的键值对的RDD上使用。 在Scala中，它也可以隐式转换为Writable的类型（Spark包括基本类型的转换，如Int，Double，String等）</td><td></td></tr><tr><td>saveAsObjectFile(path) (Java and Scala)</td><td>使用Java序列化以简单的格式编写数据集的元素，然后可以使用SparkContext.objectFile()加载</td><td></td></tr><tr><td>countByKey()</td><td>仅适用于（K，V）类型的RDD。 返回具有每个键的计数的（K，Int）对的哈希</td><td></td></tr><tr><td>foreach(func)</td><td>对数据集的每个元素运行函数func。 这通常会有其他影响，例如更新累加器或与外部存储系统交互。注意：修改除foreach（）之外的累加器以外的变量可能会导致未定义的行为</td></tr></tbody></table><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考：<a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/programming-guide.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;使用语言：scala&lt;/p&gt;
&lt;p&gt;术语：Resilient Distributed Datasets（RDD）&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="spark" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/spark/"/>
    
      <category term="scala" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>wireshark抓包过虑规则</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/wireshark%E6%8A%93%E5%8C%85%E8%BF%87%E8%99%91%E8%A7%84%E5%88%99/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/wireshark抓包过虑规则/</id>
    <published>2018-09-05T07:32:48.000Z</published>
    <updated>2018-09-05T08:05:46.728Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载地址：<a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">https://www.wireshark.org/download.html</a></p><h4 id="规则描述"><a href="#规则描述" class="headerlink" title="规则描述"></a>规则描述</h4><table><thead><tr><th>规则</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>http.request.uri</td><td>过滤出所有uri</td><td></td></tr><tr><td>http.request.method==”POST”</td><td>过滤出所有post请求</td><td></td></tr><tr><td>http.request.uri==”/v2transapi”</td><td>过滤指定uri</td><td>过滤出/v2transapi</td></tr><tr><td>http.request.uri matches “/*api”</td><td>过滤url中包含api结尾的uri</td><td></td></tr><tr><td>ip.src==106.39.162.57</td><td>来源ip等于某个ip</td><td>同ip.src eq 106.39.162.57</td></tr><tr><td>ip.dst==106.39.162.57</td><td>目标ip等于某个ip</td><td>同ip.dst eq 106.39.162.57</td></tr><tr><td>ip.addr==106.39.162.57</td><td>同时显示来源和目标ip</td><td>同ip.addr eq 192.168.1.107</td></tr><tr><td>tcp.port==443</td><td>过滤端口</td><td>过滤出端口为443</td></tr><tr><td>http</td><td>过滤协议</td><td>同tcp、udp、arp、http、ftp、ssl、smtp、dns、ip</td></tr><tr><td>eth.dst==A0:00:00:04:C5:84</td><td>太以网头过滤</td><td>过滤目标mac</td></tr></tbody></table><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>访问<a href="http://fanyi.baidu.com/v2transapi?simple_means_flag=3&amp;transtype=translang&amp;query=hello&amp;from=en&amp;to=zh" target="_blank" rel="noopener">http://fanyi.baidu.com/v2transapi</a>结果如下：</p><p><img src="http://img.blog.csdn.net/20170314165120591?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmd5b25nMTU5ODQyODU2MjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="http协议包"></p><p>1）No1：请求客户端（10.57.2.232）向服务器（106.39.162.57）发出连接请求。此为TCP三次握手第一步，此时从图中可以看出，为SYN，seq:X （x=0）<br>2）No2：服务器（106.39.162.57）回应了请求客户端（10.57.2.232）的请求，并要求确认，此时为：SYN，ACK，此时seq：y（y为0），ACK：x+1（为1）。此为三次握手的第二步；<br>3）No3：请求客户端（10.57.2.232）回应了服务器（106.39.162.57）的确认，连接成功。为：ACK，此时seq：x+1（为1），ACK：y+1（为1）。此为三次握手的第三步；<br>4）No4：请求客户端（10.57.2.232）发出一个页面HTTP请求；<br>5）No5：服务器（106.39.162.57）确认；<br>6）No6：服务器（106.39.162.57）发送数据；</p><h4 id="TCP-三次握手协议"><a href="#TCP-三次握手协议" class="headerlink" title="TCP 三次握手协议"></a>TCP 三次握手协议</h4><p><img src="http://img.blog.csdn.net/20170314170259932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmd5b25nMTU5ODQyODU2MjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>详见百科：<a href="http://baike.baidu.com/item/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B?fr=aladdin" target="_blank" rel="noopener">http://baike.baidu.com/item/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B?fr=aladdin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显
      
    
    </summary>
    
    
      <category term="wireshark" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>dubbo泛化调用</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/dubbo%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/dubbo泛化调用/</id>
    <published>2018-09-05T07:30:32.000Z</published>
    <updated>2018-09-05T07:31:11.253Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><blockquote><p>泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过GenericService调用所有服务实现。</p></blockquote><h4 id="二、调用示列"><a href="#二、调用示列" class="headerlink" title="二、调用示列"></a>二、调用示列</h4><p>方式一： xml声明dubbo reference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference id=&quot;valueService&quot; interface=&quot;cn.pomelo.client.intf.IListValueService&quot; generic=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GenericService barService = (GenericService) applicationContext.getBean(&quot;valueService&quot;);</span><br><span class="line"></span><br><span class="line">// 用Map表示POJO参数，如果返回值为POJO也将自动转成Map</span><br><span class="line">Map&lt;String, Object&gt; cache = new HashMap&lt;&gt;();</span><br><span class="line">cache.put(&quot;type&quot;, &quot;mobile&quot;);</span><br><span class="line">cache.put(&quot;value&quot;, &quot;18969975142&quot;);</span><br><span class="line"></span><br><span class="line">// 基本类型以及Date,List,Map等不需要转换，直接调用</span><br><span class="line">Object result = genericService.$invoke(&quot;getCache&quot;,</span><br><span class="line">                                       new String[] &#123; &quot;cn.pomelo.client.pojo.request.ListQueryBean&quot; &#125;,</span><br><span class="line">                                       new Object[] &#123; cache &#125;);</span><br></pre></td></tr></table></figure><p>方式二：xml不声明dubbo reference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> @Autowired</span><br><span class="line"> private ReferenceConfig&lt;GenericService&gt; referenceConfig;</span><br><span class="line"></span><br><span class="line"> public Object genericInvoker() &#123;</span><br><span class="line">    // 引用远程服务</span><br><span class="line">    ReferenceConfig&lt;GenericService&gt; reference = new ReferenceConfig&lt;&gt;(); // 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存</span><br><span class="line">    reference.setInterface(&quot;cn.pomelo.client.intf.IListValueService&quot;); // 弱类型接口名</span><br><span class="line">    reference.setVersion(&quot;1.0.0&quot;);</span><br><span class="line">    reference.setGeneric(true); // 声明为泛化接口</span><br><span class="line">    reference.setApplication(referenceConfig.getApplication());</span><br><span class="line">    reference.setRegistry(referenceConfig.getRegistry());</span><br><span class="line"></span><br><span class="line">    GenericService genericService = reference.get(); // 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用</span><br><span class="line"></span><br><span class="line">    // 用Map表示POJO参数，如果返回值为POJO也将自动转成Map</span><br><span class="line">    Map&lt;String, Object&gt; cache = new HashMap&lt;&gt;();</span><br><span class="line">    cache.put(&quot;type&quot;, &quot;mobile&quot;);</span><br><span class="line">    cache.put(&quot;value&quot;, &quot;18969975142&quot;);</span><br><span class="line">    // 基本类型以及Date,List,Map等不需要转换，直接调用</span><br><span class="line">    Object result = genericService.$invoke(&quot;getCache&quot;,</span><br><span class="line">                                           new String[] &#123; &quot;cn.pomelo.client.pojo.request.ListQueryBean&quot; &#125;,</span><br><span class="line">                                           new Object[] &#123; cache &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map
      
    
    </summary>
    
    
      <category term="dubbo" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>greys在线问题诊断工具</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/greys%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/greys使用/</id>
    <published>2018-09-05T07:27:24.000Z</published>
    <updated>2018-09-05T07:28:04.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><blockquote><p> 我们平时在线上或者开发中会遇到各种性能、功能等问题，在运行过程中需要查看方法入参、返回值，或者方法执行的堆栈时间，或者jar冲突时类加载来自那个jar包等问题。我们在开发过程中，可能会打印log日志、手动去打印入参、返回值等，或者自己实现简单的profile方法，代码侵入性大且效率较低；另外我们可以使用类似btrace工具去跟踪，这需要自己去实现btrace脚本，服务端需要启动agent，也有点小麻烦。后来淘宝聚石用scala写了个houseMD，但只支持到jdk1.6，后续也没有更新了；后面又有淘宝同学借鉴了btrace和houseMD，写了Greys，方便定位常见的java问题，下面简单介绍其使用方法。</p></blockquote><p>下载地址：<a href="http://ompc.oss.aliyuncs.com/greys/release/greys-1.7.6.4-bin.zip" target="_blank" rel="noopener">http://ompc.oss.aliyuncs.com/greys/release/greys-1.7.6.4-bin.zip</a></p><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><p>a. 解压greys-1.7.6.4-bin.zip，目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x. 1 admin admin    1047 11月  7 11:54 ga.sh</span><br><span class="line">-rw-r--r--. 1 admin admin   10595 11月  7 11:54 greys-agent.jar</span><br><span class="line">-rw-r--r--. 1 admin admin 3472230 11月  7 11:54 greys-core.jar</span><br><span class="line">-rwxr-xr-x. 1 admin admin    7972 11月  7 11:54 greys.sh</span><br><span class="line">-rwxr-xr-x. 1 admin admin    2927 11月  7 11:54 gs.sh</span><br><span class="line">-rwxr-xr-x. 1 admin admin     683 11月  7 11:54 install-local.sh</span><br></pre></td></tr></table></figure><p>b. 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd greys</span><br><span class="line">sh ./install-local.sh</span><br></pre></td></tr></table></figure><h4 id="三、待监控应用启动agent"><a href="#三、待监控应用启动agent" class="headerlink" title="三、待监控应用启动agent"></a>三、待监控应用启动agent</h4><p>pid为应用进程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ga.sh pid</span><br></pre></td></tr></table></figure><h4 id="四、应用监控控制客户端"><a href="#四、应用监控控制客户端" class="headerlink" title="四、应用监控控制客户端"></a>四、应用监控控制客户端</h4><p>pid 为应用进程号， ip为应用所在机器， 3658为agent默认端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys.sh pid@ip:3658</span><br></pre></td></tr></table></figure><p>或者远程访问<code>telnet ip 3658</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gs.sh ip</span><br></pre></td></tr></table></figure><h4 id="五、Greys命令详解"><a href="#五、Greys命令详解" class="headerlink" title="五、Greys命令详解"></a>五、Greys命令详解</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>help</td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td>sc</td><td>查看JVM已加载的类信息</td></tr><tr><td>sm</td><td>查看已加载的方法信息</td></tr><tr><td>monitor</td><td>方法执行监控</td></tr><tr><td>trace</td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td>ptrace</td><td>强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动</td></tr><tr><td>watch</td><td>方法执行数据观测</td></tr><tr><td>tt</td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td>stack</td><td>输出当前方法被调用的调用路径</td></tr><tr><td>js</td><td>支持使用JavaScript脚本；支持CommonJS部分规范模块化（BMD规范）</td></tr><tr><td>version</td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td>quit</td><td>退出greys客户端</td></tr><tr><td>shutdown</td><td>关闭greys服务端</td></tr><tr><td>rest</td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td>session</td><td>查看当前会话</td></tr><tr><td>jvm</td><td>查看当前JVM的信息</td></tr></tbody></table><p>访问agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 10.57.17.146 3658   或  ./greys.sh 17602</span><br></pre></td></tr></table></figure><p>查看JVM已加载的类信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc -df cn.fraudmetrix.norns.controller.ListValueController</span><br></pre></td></tr></table></figure><p>查看类方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sm -d cn.fraudmetrix.norns.controller.ListValueController *</span><br></pre></td></tr></table></figure><p>统计一段周期类方法执行情况（默认120s）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monitor -c 5 *ListValueController queryCache</span><br></pre></td></tr></table></figure><p>追踪方法执行链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace cn.fraudmetrix.norns.controller.ListValueController queryCache</span><br></pre></td></tr></table></figure><p>查看方法执行时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptrace  -t -n 5 cn.fraudmetrix.norns.controller.ListValueController queryCache</span><br></pre></td></tr></table></figure><p>查看入参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -b cn.fraudmetrix.norns.controller.ListValueController queryCache &apos;&quot;partnerCode=&quot;+params[0]&apos;</span><br></pre></td></tr></table></figure><p>查看返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -s cn.fraudmetrix.norns.controller.ListValueController queryCache returnObj -x 4</span><br></pre></td></tr></table></figure><p>统计方法执行时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt -t -n 3 cn.fraudmetrix.norns.controller.ListValueController queryCache</span><br></pre></td></tr></table></figure><p>重放请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt -i 1055 -p</span><br></pre></td></tr></table></figure><p>查看方法栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack cn.fraudmetrix.norns.controller.ListValueController queryCache</span><br></pre></td></tr></table></figure><p>参考地址：</p><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf" target="_blank" rel="noopener">https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; 我们平时在线上或者开发中会遇到各种性能、功能等问题，在运行过程中需要查看方法入参、返回值，或者方
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>cassandra使用</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/cassandra%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/cassandra使用/</id>
    <published>2018-09-05T07:26:18.000Z</published>
    <updated>2018-09-05T07:26:59.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p><a href="http://cassandra.apache.org/doc/latest/" target="_blank" rel="noopener">http://cassandra.apache.org/doc/latest/</a></p><h4 id="二、下载地址"><a href="#二、下载地址" class="headerlink" title="二、下载地址"></a>二、下载地址</h4><p><a href="http://www.apache.org/dyn/closer.lua/cassandra/2.2.8/apache-cassandra-2.2.8-bin.tar.gz" target="_blank" rel="noopener">http://www.apache.org/dyn/closer.lua/cassandra/2.2.8/apache-cassandra-2.2.8-bin.tar.gz</a></p><h4 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h4><p>1）进入~/apache-cassandra-2.2.8/bin 目录：</p><table><thead><tr><th>命令</th><th>备注</th></tr></thead><tbody><tr><td>./cassandra</td><td>启动</td></tr><tr><td>./cqlsh localhost</td><td>连接cassandra</td></tr></tbody></table><p>2）执行<code>./cassandra</code> 启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">➜  bin ./cassandra</span><br><span class="line">INFO  13:10:18 Create new Keyspace: KSMetaData&#123;name=system_traces, strategyClass=SimpleStrategy, strategyOptions=&#123;replication_factor=2&#125;, cfMetaData=&#123;sessions=org.apache.cassandra.config.CFMetaData@758a3875[cfId=c5e99f16-8677-3914-b17e-960613512345,ksName=system_traces,cfName=sessions,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(706172616d6574657273:org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type))),comment=tracing sessions,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=client, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=command, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=session_id, type=org.apache.cassandra.db.marshal.UUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=request, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=duration, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parameters, type=org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false], events=org.apache.cassandra.config.CFMetaData@385c6d59[cfId=8826e8e9-e16a-3728-8753-3bc1fc713c25,ksName=system_traces,cfName=events,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.TimeUUIDType,org.apache.cassandra.db.marshal.UTF8Type),comment=tracing events,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=activity, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=thread, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=session_id, type=org.apache.cassandra.db.marshal.UUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=event_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=source, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=source_elapsed, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]&#125;, durableWrites=true, userTypes=org.apache.cassandra.config.UTMetaData@2d70e448&#125;</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_keyspaces@1730498753(0.261KiB serialized bytes, 7 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_columnfamilies@1114064844(31.533KiB serialized bytes, 507 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_columns@36217111(53.858KiB serialized bytes, 1065 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_triggers@462323136(0.008KiB serialized bytes, 1 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_usertypes@688388391(0.008KiB serialized bytes, 1 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_functions@93851770(0.008KiB serialized bytes, 1 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Writing Memtable-schema_aggregates@1817313611(0.008KiB serialized bytes, 1 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:18 Loading org.apache.cassandra.config.CFMetaData@a883085[cfId=c5e99f16-8677-3914-b17e-960613512345,ksName=system_traces,cfName=sessions,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(706172616d6574657273:org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type))),comment=tracing sessions,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=client, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=command, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=session_id, type=org.apache.cassandra.db.marshal.UUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=request, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=duration, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parameters, type=org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:18 Initializing system_traces.sessions</span><br><span class="line">INFO  13:10:18 Loading org.apache.cassandra.config.CFMetaData@6d830a67[cfId=8826e8e9-e16a-3728-8753-3bc1fc713c25,ksName=system_traces,cfName=events,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.TimeUUIDType,org.apache.cassandra.db.marshal.UTF8Type),comment=tracing events,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=activity, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=session_id, type=org.apache.cassandra.db.marshal.UUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=thread, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=event_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=source, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=source_elapsed, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:18 Initializing system_traces.events</span><br><span class="line">INFO  13:10:19 Create new Keyspace: KSMetaData&#123;name=system_distributed, strategyClass=SimpleStrategy, strategyOptions=&#123;replication_factor=3&#125;, cfMetaData=&#123;parent_repair_history=org.apache.cassandra.config.CFMetaData@5cb7be55[cfId=deabd734-b99d-3b9c-92e5-fd92eb5abf14,ksName=system_distributed,cfName=parent_repair_history,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7265717565737465645f72616e676573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type),7375636365737366756c5f72616e676573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type),636f6c756d6e66616d696c795f6e616d6573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=Repair history,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.TimeUUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=requested_ranges, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_message, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=keyspace_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=successful_ranges, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=finished_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_stacktrace, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=columnfamily_names, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parent_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false], repair_history=org.apache.cassandra.config.CFMetaData@4b9e021f[cfId=759fffad-624b-3181-80ee-fa9a52d1f627,ksName=system_distributed,cfName=repair_history,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.TimeUUIDType,org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7061727469636970616e7473:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.InetAddressType))),comment=Repair history,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=status, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=finished_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=participants, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.InetAddressType), kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_stacktrace, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parent_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=range_end, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=range_begin, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_message, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=keyspace_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=columnfamily_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]&#125;, durableWrites=true, userTypes=org.apache.cassandra.config.UTMetaData@467b6850&#125;</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_keyspaces@1850671951(0.143KiB serialized bytes, 3 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_columnfamilies@405770394(3.464KiB serialized bytes, 46 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_columns@1479973311(8.548KiB serialized bytes, 154 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@60869928[cfId=deabd734-b99d-3b9c-92e5-fd92eb5abf14,ksName=system_distributed,cfName=parent_repair_history,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7265717565737465645f72616e676573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type),7375636365737366756c5f72616e676573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type),636f6c756d6e66616d696c795f6e616d6573:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=Repair history,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.TimeUUIDType,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=requested_ranges, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_message, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=keyspace_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=successful_ranges, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=finished_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_stacktrace, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=columnfamily_names, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parent_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_distributed.parent_repair_history</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@323fa569[cfId=759fffad-624b-3181-80ee-fa9a52d1f627,ksName=system_distributed,cfName=repair_history,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.TimeUUIDType,org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7061727469636970616e7473:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.InetAddressType))),comment=Repair history,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=0,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=status, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=finished_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=participants, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.InetAddressType), kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_stacktrace, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=parent_id, type=org.apache.cassandra.db.marshal.TimeUUIDType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=range_end, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=range_begin, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=exception_message, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=keyspace_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=columnfamily_name, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_distributed.repair_history</span><br><span class="line">INFO  13:10:19 Writing Memtable-local@1820980522(0.081KiB serialized bytes, 8 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Writing Memtable-local@1300886093(8.380KiB serialized bytes, 259 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Create new Keyspace: KSMetaData&#123;name=system_auth, strategyClass=SimpleStrategy, strategyOptions=&#123;replication_factor=1&#125;, cfMetaData=&#123;role_permissions=org.apache.cassandra.config.CFMetaData@2da8e456[cfId=3afbe79f-2194-31a7-add7-f5ab90d8ec9c,ksName=system_auth,cfName=role_permissions,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7065726d697373696f6e73:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=permissions granted to db roles,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=resource, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=permissions, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false], roles=org.apache.cassandra.config.CFMetaData@7fd294cb[cfId=5bc52802-de25-35ed-aeab-188eecebb090,ksName=system_auth,cfName=roles,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(6d656d6265725f6f66:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=role definitions,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=member_of, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=salted_hash, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=can_login, type=org.apache.cassandra.db.marshal.BooleanType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=is_superuser, type=org.apache.cassandra.db.marshal.BooleanType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false], resource_role_permissons_index=org.apache.cassandra.config.CFMetaData@71c8e59a[cfId=5f2fbdad-91f1-3946-bd25-d5da3a5c35ec,ksName=system_auth,cfName=resource_role_permissons_index,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),comment=index of db roles with permissions granted on a resource,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=resource, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false], role_members=org.apache.cassandra.config.CFMetaData@46408804[cfId=0ecdaa87-f8fb-3e60-88d1-74fb36fe5c0d,ksName=system_auth,cfName=role_members,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),comment=role memberships lookup table,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=member, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]&#125;, durableWrites=true, userTypes=org.apache.cassandra.config.UTMetaData@11c2113f&#125;</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_keyspaces@873579796(0.143KiB serialized bytes, 3 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_columnfamilies@77400274(5.873KiB serialized bytes, 92 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Writing Memtable-schema_columns@535165102(3.936KiB serialized bytes, 84 ops, 0%/0% of on/off-heap limit)</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@2d39cd1[cfId=3afbe79f-2194-31a7-add7-f5ab90d8ec9c,ksName=system_auth,cfName=role_permissions,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(7065726d697373696f6e73:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=permissions granted to db roles,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=resource, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=permissions, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=1, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_auth.role_permissions</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@7c4ca95e[cfId=5f2fbdad-91f1-3946-bd25-d5da3a5c35ec,ksName=system_auth,cfName=resource_role_permissons_index,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),comment=index of db roles with permissions granted on a resource,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=resource, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_auth.resource_role_permissons_index</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@5b017be3[cfId=5bc52802-de25-35ed-aeab-188eecebb090,ksName=system_auth,cfName=roles,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.ColumnToCollectionType(6d656d6265725f6f66:org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type))),comment=role definitions,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=member_of, type=org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=salted_hash, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=can_login, type=org.apache.cassandra.db.marshal.BooleanType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=is_superuser, type=org.apache.cassandra.db.marshal.BooleanType, kind=REGULAR, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_auth.roles</span><br><span class="line">INFO  13:10:19 Loading org.apache.cassandra.config.CFMetaData@4aa13f0a[cfId=0ecdaa87-f8fb-3e60-88d1-74fb36fe5c0d,ksName=system_auth,cfName=role_members,cfType=Standard,comparator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),comment=role memberships lookup table,readRepairChance=0.0,dcLocalReadRepairChance=0.0,gcGraceSeconds=7776000,defaultValidator=org.apache.cassandra.db.marshal.BytesType,keyValidator=org.apache.cassandra.db.marshal.UTF8Type,minCompactionThreshold=4,maxCompactionThreshold=32,columnMetadata=[ColumnDefinition&#123;name=role, type=org.apache.cassandra.db.marshal.UTF8Type, kind=PARTITION_KEY, componentIndex=null, indexName=null, indexType=null&#125;, ColumnDefinition&#123;name=member, type=org.apache.cassandra.db.marshal.UTF8Type, kind=CLUSTERING_COLUMN, componentIndex=0, indexName=null, indexType=null&#125;],compactionStrategyClass=class org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy,compactionStrategyOptions=&#123;&#125;,compressionParameters=&#123;sstable_compression=org.apache.cassandra.io.compress.LZ4Compressor&#125;,bloomFilterFpChance=0.01,memtableFlushPeriod=3600000,caching=&#123;&quot;keys&quot;:&quot;ALL&quot;, &quot;rows_per_partition&quot;:&quot;NONE&quot;&#125;,defaultTimeToLive=0,minIndexInterval=128,maxIndexInterval=2048,speculativeRetry=99.0PERCENTILE,droppedColumns=&#123;&#125;,triggers=[],isDense=false]</span><br><span class="line">INFO  13:10:19 Initializing system_auth.role_members</span><br></pre></td></tr></table></figure><p>3）执行 <code>./cqlsh localhost</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  bin ./cqlsh localhost</span><br><span class="line">Connected to Test Cluster at localhost:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 2.2.8 | CQL spec 3.3.1 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br><span class="line">cqlsh&gt; SELECT cluster_name, listen_address FROM system.local;</span><br><span class="line"></span><br><span class="line"> cluster_name | listen_address</span><br><span class="line">--------------+----------------</span><br><span class="line"> Test Cluster |      127.0.0.1</span><br><span class="line"></span><br><span class="line">(1 rows)</span><br><span class="line">cqlsh&gt;</span><br></pre></td></tr></table></figure><h4 id="四、Java-API"><a href="#四、Java-API" class="headerlink" title="四、Java API"></a>四、Java API</h4><p>1) 创建 keyspace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE KEYSPACE demodb WITH REPLICATION = &#123;&apos;class&apos; : &apos;SimpleStrategy&apos;,&apos;replication_factor&apos;: 3&#125;;</span><br></pre></td></tr></table></figure><p>2) 创建 table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">  user_name varchar,</span><br><span class="line">  password varchar,</span><br><span class="line">  gender varchar</span><br><span class="line">  PRIMARY KEY (user_name));</span><br></pre></td></tr></table></figure><p>3) 插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (user_name, password, gender) VALUES (&apos;zhengyong&apos;, &apos;1234&apos;, &apos;male&apos;);</span><br></pre></td></tr></table></figure><p>4) Java查询</p><p>参考：<a href="https://github.com/datastax/java-driver" target="_blank" rel="noopener">https://github.com/datastax/java-driver</a></p><p>手册：<a href="http://docs.datastax.com/en/developer/java-driver/3.1/manual/" target="_blank" rel="noopener">http://docs.datastax.com/en/developer/java-driver/3.1/manual/</a></p><p>maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.datastax.cassandra&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cassandra-driver-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>cassandra客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package cassandra;</span><br><span class="line"></span><br><span class="line">import com.datastax.driver.core.Cluster;</span><br><span class="line">import com.datastax.driver.core.ResultSet;</span><br><span class="line">import com.datastax.driver.core.Session;</span><br><span class="line">import com.google.common.base.Preconditions;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by zhengyong on 16/12/12.</span><br><span class="line"> */</span><br><span class="line">public class CassandraClient &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * cluster</span><br><span class="line">     */</span><br><span class="line">    private static Cluster cluster;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * session</span><br><span class="line">     */</span><br><span class="line">    private static Session session;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * table name</span><br><span class="line">     */</span><br><span class="line">    private String         keyspace;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * server ip</span><br><span class="line">     */</span><br><span class="line">    private String         serverIp;</span><br><span class="line"></span><br><span class="line">    public  CassandraClient(String keyspace, String serverIp) &#123;</span><br><span class="line">        this.keyspace = keyspace;</span><br><span class="line">        this.serverIp = serverIp;</span><br><span class="line">        createClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建cassandra客户端</span><br><span class="line">     */</span><br><span class="line">    public void createClient() &#123;</span><br><span class="line"></span><br><span class="line">        Preconditions.checkNotNull(keyspace, &quot;keyspace must be not null.&quot;);</span><br><span class="line">        Preconditions.checkNotNull(serverIp, &quot;serverIp must be not null.&quot;);</span><br><span class="line"></span><br><span class="line">        if (session == null) &#123;</span><br><span class="line">            synchronized (this) &#123;</span><br><span class="line">                cluster = Cluster.builder().addContactPoint(serverIp).build(); // (1)</span><br><span class="line">                session = cluster.connect(keyspace); // (2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ResultSet query(String sql) &#123;</span><br><span class="line">        return session.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void close() &#123;</span><br><span class="line">        if (session != null) &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        if (null != cluster) &#123;</span><br><span class="line">            cluster.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getKeyspace() &#123;</span><br><span class="line">        return keyspace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setKeyspace(String keyspace) &#123;</span><br><span class="line">        this.keyspace = keyspace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getServerIp() &#123;</span><br><span class="line">        return serverIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setServerIp(String serverIp) &#123;</span><br><span class="line">        this.serverIp = serverIp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package cassandra;</span><br><span class="line"></span><br><span class="line">import com.datastax.driver.core.ResultSet;</span><br><span class="line">import com.datastax.driver.core.Row;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by zhengyong on 16/12/12.</span><br><span class="line"> */</span><br><span class="line">public class CassandraTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        CassandraClient cassandraClient = new CassandraClient(&quot;demodb&quot;,&quot;127.0.0.1&quot;);</span><br><span class="line">        ResultSet rs = cassandraClient.query(&quot;select * from users&quot;);</span><br><span class="line"></span><br><span class="line">        Row row = rs.one();</span><br><span class="line">        System.out.println(&quot;row=&quot; + row.toString());</span><br><span class="line">        System.out.println(&quot;user_name=&quot; + row.getString(&quot;user_name&quot;));</span><br><span class="line">        System.out.println(&quot;password=&quot; + row.getString(&quot;password&quot;));</span><br><span class="line">        System.out.println(&quot;gender=&quot; + row.getString(&quot;gender&quot;));</span><br><span class="line"></span><br><span class="line">        cassandraClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2016-12-12 23:43:21,812 - com.datastax.driver.core.ClockFactory -0    [main] INFO   - Using native clock to generate timestamps.</span><br><span class="line">2016-12-12 23:43:22,212 - com.datastax.driver.core.NettyUtil -400  [main] INFO   - Did not find Netty&apos;s native epoll transport in the classpath, defaulting to NIO.</span><br><span class="line">2016-12-12 23:43:23,678 - com.datastax.driver.core.policies.DCAwareRoundRobinPolicy -1866 [main] INFO   - Using data-center name &apos;datacenter1&apos; for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)</span><br><span class="line">2016-12-12 23:43:23,683 - com.datastax.driver.core.Cluster -1871 [main] INFO   - New Cassandra host /127.0.0.1:9042 added</span><br><span class="line">row=Row[zhengyong, 1232, male, 1234, 111, state]</span><br><span class="line">user_name=zhengyong</span><br><span class="line">password=1234</span><br><span class="line">gender=male</span><br><span class="line">state=state</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  bin ./cqlsh localhost</span><br><span class="line">cqlsh&gt; use demodb;</span><br><span class="line">cqlsh:demodb&gt; select * from users ;</span><br><span class="line"></span><br><span class="line"> user_name | gender | password </span><br><span class="line">-----------+--------+----------</span><br><span class="line">  zhangsan |   male |    admin </span><br><span class="line"> zhengyong |   male |     1234 </span><br><span class="line">      root |   male |     root </span><br><span class="line"> zhangsan2 |   male |    admin </span><br><span class="line">      lisi |   male |    admin </span><br><span class="line"> zhangsan1 |   male |    admin </span><br><span class="line"></span><br><span class="line">(6 rows)</span><br></pre></td></tr></table></figure><p>CREATE TABLE users (<br>  username varchar,<br>  password varchar,<br>  gender varchar,<br>  PRIMARY KEY (username));</p><dependency><br>    <groupid>cn.fraudmetrix</groupid><br>    <artifactid>euler-dal-mysql</artifactid><br>    <version>1.0.2</version><br></dependency><br><dependency><br>    <groupid>cn.fraudmetrix</groupid><br>    <artifactid>euler-dal-graphdb</artifactid><br>    <version>1.0.3</version><br></dependency><br><dependency><br>    <groupid>cn.fraudmetrix</groupid><br>    <artifactid>euler-share</artifactid><br>    <version>1.0.2</version><br></dependency>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://cassandra.apache.org/doc/latest/&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="cassandra" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/cassandra/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch-2.3.5示列代码</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/elasticsearch-2-3-5%E7%A4%BA%E5%88%97%E4%BB%A3%E7%A0%81/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/05/elasticsearch-2-3-5示列代码/</id>
    <published>2018-09-05T04:47:07.000Z</published>
    <updated>2018-09-05T08:52:02.354Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>该示列是基于elasticsearch-2.3.5版本开发，参考地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/index.html</a></p><h4 id="二、Maven依赖"><a href="#二、Maven依赖" class="headerlink" title="二、Maven依赖"></a>二、Maven依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.35&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="三、Java代码"><a href="#三、Java代码" class="headerlink" title="三、Java代码"></a>三、Java代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">package easticsearch;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line">import org.elasticsearch.action.get.GetResponse;</span><br><span class="line">import org.elasticsearch.action.index.IndexResponse;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line">import org.elasticsearch.client.transport.TransportClient;</span><br><span class="line">import org.elasticsearch.common.settings.Settings;</span><br><span class="line">import org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line"></span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by zhengyong on 16/11/22.</span><br><span class="line"> */</span><br><span class="line">public class Elasticsearch &#123;</span><br><span class="line"></span><br><span class="line">    private static TransportClient client   = null;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * es index</span><br><span class="line">     */</span><br><span class="line">    private static final String    ES_INDEX = &quot;database_test&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * es type</span><br><span class="line">     */</span><br><span class="line">    private static final String    ES_TYPE  = &quot;user&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        createClient();</span><br><span class="line"></span><br><span class="line">        String _id = createIndex();</span><br><span class="line"></span><br><span class="line">        getDataResponse(_id);</span><br><span class="line"></span><br><span class="line">        updateData(_id);</span><br><span class="line"></span><br><span class="line">        getDataResponse(_id);</span><br><span class="line"></span><br><span class="line">        QueryBuilder builder = QueryBuilders.matchAllQuery();</span><br><span class="line">        // QueryBuilder builder = QueryBuilders.termQuery(&quot;username&quot;, &quot;zhengyong&quot;);</span><br><span class="line">        queryDataList(builder);</span><br><span class="line"></span><br><span class="line">        // deleteDataResponse(_id);</span><br><span class="line"></span><br><span class="line">        shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void createClient() throws Exception &#123;</span><br><span class="line">        if (client == null) &#123;</span><br><span class="line">            synchronized (Elasticsearch.class) &#123;</span><br><span class="line">                Settings settings = Settings.settingsBuilder().put(&quot;cluster.name&quot;, &quot;myCluster&quot;).build();</span><br><span class="line">                client = TransportClient.builder().settings(settings).build().addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(&quot;localhost&quot;),</span><br><span class="line">                                                                                                                                 9300));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建es库并导入数据</span><br><span class="line">     * </span><br><span class="line">     * @return _id</span><br><span class="line">     */</span><br><span class="line">    private static String createIndex() &#123;</span><br><span class="line">        String json = &quot;&#123;&quot; + &quot;\&quot;username\&quot;:\&quot;zhengyong\&quot;,&quot; + &quot;\&quot;postDate\&quot;:\&quot;&quot; + new Date().toLocaleString() + &quot;\&quot;,&quot;</span><br><span class="line">                      + &quot;\&quot;message\&quot;:\&quot;create\&quot;&quot; + &quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">        IndexResponse response = client.prepareIndex(ES_INDEX, ES_TYPE).setSource(json).get();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(&quot;create index response: %s&quot;, response.toString()));</span><br><span class="line"></span><br><span class="line">        return response.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据_id获取数据</span><br><span class="line">     * </span><br><span class="line">     * @param _id 唯一标识</span><br><span class="line">     * @return GetResponse</span><br><span class="line">     */</span><br><span class="line">    private static GetResponse getDataResponse(String _id) &#123;</span><br><span class="line">        GetResponse response = client.prepareGet(ES_INDEX, ES_TYPE, _id).get();</span><br><span class="line">        System.out.println(String.format(&quot;get data response: %s&quot;, JSON.toJSONString(response.getSource())));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据查询条件查询结果集</span><br><span class="line">     * </span><br><span class="line">     * @param queryBuilder 查询条件</span><br><span class="line">     * @return List</span><br><span class="line">     */</span><br><span class="line">    private static List&lt;String&gt; queryDataList(QueryBuilder queryBuilder) &#123;</span><br><span class="line">        SearchResponse sResponse = client.prepareSearch(ES_INDEX).setTypes(ES_TYPE).setQuery(queryBuilder).setSize(1000).execute().actionGet();</span><br><span class="line">        SearchHits hits = sResponse.getHits();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(hits.getTotalHits());</span><br><span class="line">        SearchHit[] hitArray = hits.hits();</span><br><span class="line">        for (SearchHit hit : hitArray) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = hit.getSource();</span><br><span class="line"></span><br><span class="line">            String username = (String) map.get(&quot;username&quot;);</span><br><span class="line">            String postDate = (String) map.get(&quot;postDate&quot;);</span><br><span class="line">            String message = (String) map.get(&quot;message&quot;);</span><br><span class="line"></span><br><span class="line">            StringBuilder br = new StringBuilder();</span><br><span class="line">            br.append(username).append(&quot;_&quot;).append(message).append(&quot;_&quot;).append(postDate);</span><br><span class="line">            list.add(br.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(&quot;query data count=%s, list : %s&quot;, list.size(), JSON.toJSONString(list)));</span><br><span class="line"></span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据_id删除数据</span><br><span class="line">     * </span><br><span class="line">     * @param _id 唯一标识</span><br><span class="line">     * @return DeleteResponse</span><br><span class="line">     */</span><br><span class="line">    private static DeleteResponse deleteDataResponse(String _id) &#123;</span><br><span class="line">        DeleteResponse response = client.prepareDelete(ES_INDEX, ES_TYPE, _id).get();</span><br><span class="line">        System.out.println(String.format(&quot;delete data response: %s&quot;, JSON.toJSONString(response)));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据_id跟下数据</span><br><span class="line">     * </span><br><span class="line">     * @param _id 唯一标识</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private static void updateData(String _id) throws Exception &#123;</span><br><span class="line">        UpdateRequest updateRequest = new UpdateRequest();</span><br><span class="line">        updateRequest.index(ES_INDEX);</span><br><span class="line">        updateRequest.type(ES_TYPE);</span><br><span class="line">        updateRequest.id(_id);</span><br><span class="line"></span><br><span class="line">        String json = &quot;&#123;&quot; + &quot;\&quot;username\&quot;:\&quot;lisi\&quot;,&quot; + &quot;\&quot;postDate\&quot;:\&quot;&quot; + new Date().toLocaleString() + &quot;\&quot;,&quot;</span><br><span class="line">                      + &quot;\&quot;message\&quot;:\&quot;update\&quot;&quot; + &quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">        updateRequest.doc(json);</span><br><span class="line"></span><br><span class="line">        client.update(updateRequest).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void shutdown() &#123;</span><br><span class="line">        if (client == null) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、异常信息"><a href="#四、异常信息" class="headerlink" title="四、异常信息"></a>四、异常信息</h4><p>开发时由于maven依赖elasticsearch版本与安装包版本不一致，出现以下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: []]</span><br><span class="line">at org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:314)</span><br><span class="line">at org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:228)</span><br><span class="line">at org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:63)</span><br><span class="line">at org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:326)</span><br><span class="line">at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:403)</span><br><span class="line">at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:80)</span><br><span class="line">at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:54)</span><br><span class="line">at org.elasticsearch.action.ActionRequestBuilder.get(ActionRequestBuilder.java:62)</span><br><span class="line">at easticsearch.Elasticsearch.createIndex(Elasticsearch.java:51)</span><br><span class="line">at easticsearch.Elasticsearch.main(Elasticsearch.java:23)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class="line">at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br></pre></td></tr></table></figure><h4 id="五、解决办法"><a href="#五、解决办法" class="headerlink" title="五、解决办法"></a>五、解决办法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要elasticsearch-2.3.5与client的jar版本一致</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;p&gt;该示列是基于elasticsearch-2.3.5版本开发，参考地址：&lt;a href=&quot;https://www.elasti
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署github博客</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/04/Hexo%E9%83%A8%E7%BD%B2github%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/04/Hexo部署github博客/</id>
    <published>2018-09-04T03:05:11.000Z</published>
    <updated>2018-09-13T09:38:13.795Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><blockquote><p>使用github创建一个仓库为github.io就能变成一个使用域名能够访问的博客站点。然后我们通过Hexo创建文章，发布到<code>github.io</code>仓库，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo能够快速生成博客和部署博客，使创建博客更加简单。</p></blockquote><h4 id="二、安装清单（Mac-OS）"><a href="#二、安装清单（Mac-OS）" class="headerlink" title="二、安装清单（Mac OS）"></a>二、安装清单（Mac OS）</h4><table><thead><tr><th>安装环境</th><th>安装原因</th></tr></thead><tbody><tr><td>git</td><td>给github上传文章</td></tr><tr><td>Node.js</td><td>Hexo基于Node.js开发</td></tr><tr><td>Hexo</td><td>生成博客静态页面</td></tr></tbody></table><h4 id="三、创建github-io网站"><a href="#三、创建github-io网站" class="headerlink" title="三、创建github.io网站"></a>三、创建github.io网站</h4><p>1）点击New repository</p><p>2）输入Repository name，必需为<code>username.github.io</code>格式。username替换为用户名</p><p>3）点击按钮Create repository</p><p>4）进入仓库<code>username.github.io</code>,点击<code>setting</code>,找到<code>GitHub Pages</code>模块</p><p>5）点击<code>choose a theme</code>选择一个页面主题</p><p>6）访问<code>https://username.github.io</code>就可以访问博客网站了</p><h4 id="四、安装git"><a href="#四、安装git" class="headerlink" title="四、安装git"></a>四、安装git</h4><p>下载安装：<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">http://sourceforge.net/projects/git-osx-installer/</a></p><p>验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ git version</span><br><span class="line">git version 2.15.0</span><br></pre></td></tr></table></figure><h4 id="五、安装Node-js"><a href="#五、安装Node-js" class="headerlink" title="五、安装Node.js"></a>五、安装Node.js</h4><p>下载安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ node -v</span><br><span class="line">v8.9.4</span><br></pre></td></tr></table></figure><h4 id="六、安装Hexo"><a href="#六、安装Hexo" class="headerlink" title="六、安装Hexo"></a>六、安装Hexo</h4><p>安装命令: <code>npm install -g hexo-cli</code></p><p>验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ hexo -v</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Darwin 17.3.0 darwin x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 8.9.4</span><br><span class="line">v8: 6.1.534.50</span><br><span class="line">uv: 1.15.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.25.0</span><br><span class="line">openssl: 1.0.2n</span><br><span class="line">icu: 59.1</span><br><span class="line">unicode: 9.0</span><br><span class="line">cldr: 31.0.1</span><br><span class="line">tz: 2017b</span><br></pre></td></tr></table></figure><h4 id="七、创建本地博文服务"><a href="#七、创建本地博文服务" class="headerlink" title="七、创建本地博文服务"></a>七、创建本地博文服务</h4><ol><li>然后创建一个空文件夹, 比如：<code>hexo-blog</code></li><li>进入<code>hexo-blog</code>目录</li><li>执行<code>hexo init</code>初始化博客站点，如果最后一行显示<code>Start blogging with Hexo!</code>，代表创建成功</li><li>执行<code>hexo server</code> 启动博文站点</li><li>访问<code>http://localhost:4000</code>就能打开博文了</li><li><code>Ctrl+C</code>关闭服务器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mkdir hexo-blog</span><br><span class="line">➜  ~ cd hexo-blog</span><br><span class="line">➜  hexo-blog hexo init</span><br><span class="line">INFO  Cloning hexo-starter to ~/hexo-blog</span><br><span class="line">Cloning into &apos;/Users/zhengyong/hexo-blog&apos;...</span><br><span class="line">remote: Counting objects: 68, done.</span><br><span class="line">remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 67</span><br><span class="line">Unpacking objects: 100% (68/68), done.</span><br><span class="line">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class="line">Cloning into &apos;/Users/zhengyong/hexo-blog/themes/landscape&apos;...</span><br><span class="line">remote: Counting objects: 838, done.</span><br><span class="line">remote: Compressing objects: 100% (6/6), done.</span><br><span class="line">remote: Total 838 (delta 1), reused 3 (delta 0), pack-reused 832</span><br><span class="line">Receiving objects: 100% (838/838), 2.55 MiB | 90.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (441/441), done.</span><br><span class="line">Submodule path &apos;themes/landscape&apos;: checked out &apos;73a23c51f8487cfcd7c6deec96ccc7543960d350&apos;</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line">npm WARN deprecated postinstall-build@5.0.3: postinstall-build&apos;s behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.</span><br><span class="line"></span><br><span class="line">&gt; fsevents@1.2.4 install /Users/zhengyong/hexo-blog/node_modules/fsevents</span><br><span class="line">&gt; node install</span><br><span class="line"></span><br><span class="line">[fsevents] Success: &quot;/Users/zhengyong/hexo-blog/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node&quot; already installed</span><br><span class="line">Pass --update-binary to reinstall or --build-from-source to recompile</span><br><span class="line"></span><br><span class="line">&gt; nunjucks@3.1.3 postinstall /Users/zhengyong/hexo-blog/node_modules/nunjucks</span><br><span class="line">&gt; node postinstall-build.js src</span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">added 464 packages in 28.659s</span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line">➜  hexo-blog hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">^CINFO  Good bye</span><br></pre></td></tr></table></figure><h4 id="八、Hexo关联github"><a href="#八、Hexo关联github" class="headerlink" title="八、Hexo关联github"></a>八、Hexo关联github</h4><p>1）进入<code>hexo-blog</code>根目录</p><p>2）安装<code>npm install hexo-deployer-git --save</code>，用Hexo发布博文</p><p>3）打开<code>hexo-blog</code>根目录下的_config.yml，拉倒最下面, 修改Deployment方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/username/username.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4）进入<code>hexo-blog</code>根目录执行如下命令（参考: <code>https://hexo.io/zh-cn/docs/commands</code>)，第一次上传可能会让你输入git的用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>5）如果成功，就可以打开 <code>http://username.github.io</code>,<code>username</code>替换成自己用户名</p><h4 id="九、使用Hexo创建和发布文章"><a href="#九、使用Hexo创建和发布文章" class="headerlink" title="九、使用Hexo创建和发布文章"></a>九、使用Hexo创建和发布文章</h4><p>1) 进入<code>hexo-blog</code>根目录</p><p>2) 创建文章命令：<code>hexo new &quot;文章标题&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  blog hexo new &quot;Hexo部署github博客&quot;</span><br><span class="line">INFO  Created: ~/Documents/GitHub/hexo-blog/source/_posts/Hexo部署github博客.md</span><br></pre></td></tr></table></figure><p>3) 打开编辑<code>Hexo部署github博客.md</code>文件进行<code>Markdown</code>编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/Documents/GitHub/hexo-blog/source/_posts/Hexo部署github博客.md`</span><br></pre></td></tr></table></figure><p>4）发布文章：<code>hexo d -g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  blog hexo d -g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 922 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/2018/09/index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: 2018/09/03/hello-world/index.html</span><br><span class="line">INFO  Generated: archives/2018/index.html</span><br><span class="line">INFO  Generated: 2018/09/03/my-first-hexo-blog/index.html</span><br><span class="line">INFO  Generated: fonts/iconfont.8c627f.woff</span><br><span class="line">INFO  Generated: fonts/iconfont.45d7ee.svg</span><br><span class="line">INFO  Generated: fonts/iconfont.16acc2.ttf</span><br><span class="line">INFO  Generated: fonts/default-skin.b257fa.svg</span><br><span class="line">INFO  Generated: fonts/tooltip.4004ff.svg</span><br><span class="line">INFO  Generated: img/default-skin.png</span><br><span class="line">INFO  Generated: img/scrollbar_arrow.png</span><br><span class="line">INFO  Generated: img/preloader.gif</span><br><span class="line">INFO  Generated: fonts/iconfont.b322fa.eot</span><br><span class="line">INFO  Generated: slider.e37972.js</span><br><span class="line">INFO  Generated: mobile.992cbe.js</span><br><span class="line">INFO  Generated: main.0cf68a.js</span><br><span class="line">INFO  Generated: main.0cf68a.css</span><br><span class="line">INFO  Generated: 2018/09/04/Hexo部署github博客/index.html</span><br><span class="line">INFO  20 files generated in 475 ms</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: CRLF will be replaced by LF in fonts/tooltip.4004ff.svg.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">[master d1c205f] Site updated: 2018-09-04 11:11:08</span><br><span class="line"> 6 files changed, 835 insertions(+)</span><br><span class="line"> create mode 100644 2018/09/04/Hexo部署github博客/index.html</span><br><span class="line">To https://github.com/zyongjava/zyongjava.github.io</span><br><span class="line">   3f0aab7..d1c205f  HEAD -&gt; master</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;https://github.com/zyongjava/zyongjava.github.io&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><h4 id="十、参考文献"><a href="#十、参考文献" class="headerlink" title="十、参考文献"></a>十、参考文献</h4><ol><li><a href="https://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="noopener">https://www.jianshu.com/p/863f3f2d1733</a></li><li><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;使用github创建一个仓库为github.io就能变成一个使用域名能够访问的博客站点。然后我们通
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/Hexo/"/>
    
      <category term="blog" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/blog/"/>
    
      <category term="github" scheme="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/03/hello-world/"/>
    <id>https://blog.csdn.net/zhengyong15984285623?viewmode=contents/2018/09/03/hello-world/</id>
    <published>2018-09-03T08:46:32.294Z</published>
    <updated>2018-09-03T08:46:32.294Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
